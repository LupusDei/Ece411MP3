<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 00:57:48 on 09/15/11 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity ece411.Datapath.interface</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - martin43.UNKNOWN (gelib-057-06.ews.illinois.edu)</span>
<span class=C>--          at - 23:25:54 09&#47;14&#47;11</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.NUMERIC_STD.<span class=K>all</span>;

<span class=K>LIBRARY</span> ece411;
<span class=K>USE</span> ece411.LC3b_types.<span class=K>all</span>;

<span class=K>ENTITY</span> Datapath <span class=K>IS</span>
   <span class=K>PORT</span>(
      ALUMuxSel  : <span class=A>IN</span>     LC3b_8Mux_Sel;
      ALUop      : <span class=A>IN</span>     LC3b_aluop;
      ByteExtSel : <span class=A>IN</span>     <span class=T>std_logic</span>;
      DATAIN     : <span class=A>IN</span>     LC3b_word;
      LoadIR     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      LoadMDR    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      LoadMar    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      LoadNZP    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      LoadPC     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      MARMuxSel  : <span class=A>IN</span>     LC3b_4Mux_Sel;
      MDRMuxSel  : <span class=A>IN</span>     <span class=T>std_logic</span>;
      PCMuxSel   : <span class=A>IN</span>     LC3b_8Mux_Sel;
      R7Sel_H    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      RESET_L    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      RFMuxSel   : <span class=A>IN</span>     LC3b_4Mux_Sel;
      RegWrite   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      StoreSR    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      ADDRESS    : <span class=A>OUT</span>    LC3b_word;
      ADDR_0     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      CheckN     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      CheckP     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      CheckZ     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      DATAOUT    : <span class=A>OUT</span>    LC3b_word;
      IMMEDIATE  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      JSRR       : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      Opcode     : <span class=A>OUT</span>    LC3b_opcode;
      SHIFTop    : <span class=A>OUT</span>    lc3b_shftop;
      n          : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      p          : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      z          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> Datapath ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture ece411.Datapath.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - martin43.UNKNOWN (gelib-057-06.ews.illinois.edu)</span>
<span class=C>--          at - 23:25:54 09&#47;14&#47;11</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.NUMERIC_STD.<span class=K>all</span>;

<span class=K>LIBRARY</span> ece411;
<span class=K>USE</span> ece411.LC3b_types.<span class=K>all</span>;

<span class=K>LIBRARY</span> ece411;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> Datapath <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> ADJ11out      : LC3b_word;
   <span class=K>SIGNAL</span> ADJ6out       : LC3b_word;
   <span class=K>SIGNAL</span> ADJ9out       : LC3b_word;
   <span class=K>SIGNAL</span> ALUMuxout     : LC3b_word;
   <span class=K>SIGNAL</span> ALUout        : LC3b_word;
   <span class=K>SIGNAL</span> Adj11PC       : LC3b_word;
   <span class=K>SIGNAL</span> Adj9PC        : LC3b_word;
   <span class=K>SIGNAL</span> AdjTrapout    : LC3b_word;
   <span class=K>SIGNAL</span> ByteCopyout   : LC3b_word;
   <span class=K>SIGNAL</span> ByteExtout    : LC3b_word;
   <span class=K>SIGNAL</span> Dest          : LC3b_reg;
   <span class=K>SIGNAL</span> DestReg       : LC3b_reg;
   <span class=K>SIGNAL</span> GenCCout      : LC3b_cc;
   <span class=K>SIGNAL</span> JmpAlignedAdr : LC3b_word;
   <span class=K>SIGNAL</span> MARMuxout     : LC3b_word;
   <span class=K>SIGNAL</span> MDRMuxout     : LC3b_word;
   <span class=K>SIGNAL</span> MDRout        : LC3b_word;
   <span class=K>SIGNAL</span> PCMuxout      : LC3b_word;
   <span class=K>SIGNAL</span> PCPlus2out    : LC3b_word;
   <span class=K>SIGNAL</span> PCout         : LC3b_word;
   <span class=K>SIGNAL</span> RFAout        : LC3b_word;
   <span class=K>SIGNAL</span> RFBout        : LC3b_word;
   <span class=K>SIGNAL</span> RFMuxout      : LC3b_word;
   <span class=K>SIGNAL</span> SEXT6out      : LC3b_word;
   <span class=K>SIGNAL</span> SEXTout       : LC3b_word;
   <span class=K>SIGNAL</span> SrcA          : LC3b_reg;
   <span class=K>SIGNAL</span> SrcB          : LC3b_reg;
   <span class=K>SIGNAL</span> StoreMuxout   : LC3b_reg;
   <span class=K>SIGNAL</span> TrapVect      : LC3b_trapvect8;
   <span class=K>SIGNAL</span> ZEXT4out      : lc3b_word;
   <span class=K>SIGNAL</span> imm4          : LC3b_imm4;
   <span class=K>SIGNAL</span> imm5          : LC3b_imm5;
   <span class=K>SIGNAL</span> index6        : LC3b_index6;
   <span class=K>SIGNAL</span> offset11      : LC3b_offset11;
   <span class=K>SIGNAL</span> offset9       : LC3b_offset9;

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> ADDRESS_internal : LC3b_word;
   <span class=K>SIGNAL</span> ADDR_0_internal  : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> ADJ11
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      offset11 : <span class=A>IN</span>     LC3b_offset11 ;
      ADJ11out : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> ADJ6
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      index6  : <span class=A>IN</span>     LC3b_index6 ;
      ADJ6out : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> ADJ9
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      offset9 : <span class=A>IN</span>     LC3b_offset9 ;
      ADJ9out : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> ALU
   <span class=K>PORT</span> (
      ALUMuxout : <span class=A>IN</span>     LC3b_word ;
      ALUop     : <span class=A>IN</span>     LC3b_aluop ;
      RFAout    : <span class=A>IN</span>     LC3b_word ;
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      ALUout    : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Address_0
   <span class=K>PORT</span> (
      ADDRESS : <span class=A>IN</span>     LC3b_word ;
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      ADDR_0  : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> AdjTrap
   <span class=K>PORT</span> (
      TrapVect   : <span class=A>IN</span>     LC3b_trapvect8 ;
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      AdjTrapout : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> AlignReg
   <span class=K>PORT</span> (
      RFAout        : <span class=A>IN</span>     LC3b_word ;
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      JmpAlignedAdr : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> BRadd
   <span class=K>PORT</span> (
      ADJ9out : <span class=A>IN</span>     LC3b_word ;
      PCout   : <span class=A>IN</span>     LC3b_word ;
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Adj9PC  : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> ByteExt
   <span class=K>PORT</span> (
      ADDR_0     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      ByteExtSel : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      MDRout     : <span class=A>IN</span>     LC3b_word ;
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      ByteExtout : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> GenCC
   <span class=K>PORT</span> (
      RFMuxout : <span class=A>IN</span>     LC3b_word ;
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      GenCCout : <span class=A>OUT</span>    LC3b_cc
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> IR
   <span class=K>PORT</span> (
      LoadIR    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      MDRout    : <span class=A>IN</span>     LC3b_word ;
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Dest      : <span class=A>OUT</span>    LC3b_reg ;
      IMMEDIATE : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      JSRR      : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      Opcode    : <span class=A>OUT</span>    LC3b_opcode ;
      SHIFTop   : <span class=A>OUT</span>    lc3b_shftop ;
      SrcA      : <span class=A>OUT</span>    LC3b_reg ;
      SrcB      : <span class=A>OUT</span>    LC3b_reg ;
      TrapVect  : <span class=A>OUT</span>    LC3b_trapvect8 ;
      imm4      : <span class=A>OUT</span>    LC3b_imm4 ;
      imm5      : <span class=A>OUT</span>    LC3b_imm5 ;
      index6    : <span class=A>OUT</span>    LC3b_index6 ;
      offset11  : <span class=A>OUT</span>    LC3b_offset11 ;
      offset9   : <span class=A>OUT</span>    LC3b_offset9
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> JSR_R7Sel
   <span class=K>PORT</span> (
      Dest    : <span class=A>IN</span>     LC3b_reg ;
      R7Sel_H : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      DestReg : <span class=A>OUT</span>    LC3b_reg
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> JSRadd
   <span class=K>PORT</span> (
      ADJ11out : <span class=A>IN</span>     LC3b_word ;
      PCout    : <span class=A>IN</span>     LC3b_word ;
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Adj11PC  : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> LbyteCopy
   <span class=K>PORT</span> (
      ALUout      : <span class=A>IN</span>     LC3b_word ;
      ByteExtSel  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      ByteCopyout : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> NZP
   <span class=K>PORT</span> (
      GenCCout : <span class=A>IN</span>     LC3b_cc ;
      LoadNZP  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      n        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      p        : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      z        : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> NZPsplit
   <span class=K>PORT</span> (
      Dest   : <span class=A>IN</span>     LC3b_reg ;
      clk    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      CheckN : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      CheckP : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      CheckZ : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Plus2
   <span class=K>PORT</span> (
      PCout      : <span class=A>IN</span>     LC3b_word ;
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      PCPlus2out : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> Reg16
   <span class=K>PORT</span> (
      Input  : <span class=A>IN</span>     LC3b_word ;
      RESET  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      load   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Output : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> RegFile
   <span class=K>PORT</span> (
      DestReg     : <span class=A>IN</span>     LC3b_reg ;
      RESET_L     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      RFMuxout    : <span class=A>IN</span>     LC3b_word ;
      RegWrite    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      SrcB        : <span class=A>IN</span>     LC3b_reg ;
      StoreMuxout : <span class=A>IN</span>     LC3b_reg ;
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      RFAout      : <span class=A>OUT</span>    LC3b_word ;
      RFBout      : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> SEXT
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      imm5    : <span class=A>IN</span>     LC3b_imm5 ;
      SEXTout : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> SEXT6
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      index6   : <span class=A>IN</span>     LC3b_index6 ;
      SEXT6out : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> StoreMux
   <span class=K>PORT</span> (
      Dest        : <span class=A>IN</span>     LC3b_reg ;
      SrcA        : <span class=A>IN</span>     LC3b_reg ;
      StoreSR     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      StoreMuxout : <span class=A>OUT</span>    LC3b_reg
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> WordMux2
   <span class=K>PORT</span> (
      A   : <span class=A>IN</span>     LC3b_word ;
      B   : <span class=A>IN</span>     LC3b_word ;
      Sel : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      F   : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> WordMux4
   <span class=K>PORT</span> (
      A   : <span class=A>IN</span>     LC3b_word ;
      B   : <span class=A>IN</span>     LC3b_word ;
      C   : <span class=A>IN</span>     LC3b_word ;
      D   : <span class=A>IN</span>     LC3b_word ;
      Sel : <span class=A>IN</span>     LC3b_4mux_sel ;
      F   : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> WordMux8
   <span class=K>PORT</span> (
      A   : <span class=A>IN</span>     LC3b_word ;
      B   : <span class=A>IN</span>     LC3b_word ;
      C   : <span class=A>IN</span>     LC3b_word ;
      D   : <span class=A>IN</span>     LC3b_word ;
      E   : <span class=A>IN</span>     LC3b_word ;
      F   : <span class=A>IN</span>     LC3b_word ;
      G   : <span class=A>IN</span>     LC3b_word ;
      H   : <span class=A>IN</span>     LC3b_word ;
      Sel : <span class=A>IN</span>     LC3b_8MUX_SEL ;
      O   : <span class=A>OUT</span>    LC3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> ZEXT4
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      imm4     : <span class=A>IN</span>     LC3b_imm4 ;
      ZEXT4out : <span class=A>OUT</span>    lc3b_word
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : ADJ11 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ADJ11;
   <span class=K>FOR</span> <span class=K>ALL</span> : ADJ6 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ADJ6;
   <span class=K>FOR</span> <span class=K>ALL</span> : ADJ9 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ADJ9;
   <span class=K>FOR</span> <span class=K>ALL</span> : ALU <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ALU;
   <span class=K>FOR</span> <span class=K>ALL</span> : Address_0 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.Address_0;
   <span class=K>FOR</span> <span class=K>ALL</span> : AdjTrap <span class=K>USE</span> <span class=K>ENTITY</span> ece411.AdjTrap;
   <span class=K>FOR</span> <span class=K>ALL</span> : AlignReg <span class=K>USE</span> <span class=K>ENTITY</span> ece411.AlignReg;
   <span class=K>FOR</span> <span class=K>ALL</span> : BRadd <span class=K>USE</span> <span class=K>ENTITY</span> ece411.BRadd;
   <span class=K>FOR</span> <span class=K>ALL</span> : ByteExt <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ByteExt;
   <span class=K>FOR</span> <span class=K>ALL</span> : GenCC <span class=K>USE</span> <span class=K>ENTITY</span> ece411.GenCC;
   <span class=K>FOR</span> <span class=K>ALL</span> : IR <span class=K>USE</span> <span class=K>ENTITY</span> ece411.IR;
   <span class=K>FOR</span> <span class=K>ALL</span> : JSR_R7Sel <span class=K>USE</span> <span class=K>ENTITY</span> ece411.JSR_R7Sel;
   <span class=K>FOR</span> <span class=K>ALL</span> : JSRadd <span class=K>USE</span> <span class=K>ENTITY</span> ece411.JSRadd;
   <span class=K>FOR</span> <span class=K>ALL</span> : LbyteCopy <span class=K>USE</span> <span class=K>ENTITY</span> ece411.LbyteCopy;
   <span class=K>FOR</span> <span class=K>ALL</span> : NZP <span class=K>USE</span> <span class=K>ENTITY</span> ece411.NZP;
   <span class=K>FOR</span> <span class=K>ALL</span> : NZPsplit <span class=K>USE</span> <span class=K>ENTITY</span> ece411.NZPsplit;
   <span class=K>FOR</span> <span class=K>ALL</span> : Plus2 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.Plus2;
   <span class=K>FOR</span> <span class=K>ALL</span> : Reg16 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.Reg16;
   <span class=K>FOR</span> <span class=K>ALL</span> : RegFile <span class=K>USE</span> <span class=K>ENTITY</span> ece411.RegFile;
   <span class=K>FOR</span> <span class=K>ALL</span> : SEXT <span class=K>USE</span> <span class=K>ENTITY</span> ece411.SEXT;
   <span class=K>FOR</span> <span class=K>ALL</span> : SEXT6 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.SEXT6;
   <span class=K>FOR</span> <span class=K>ALL</span> : StoreMux <span class=K>USE</span> <span class=K>ENTITY</span> ece411.StoreMux;
   <span class=K>FOR</span> <span class=K>ALL</span> : WordMux2 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.WordMux2;
   <span class=K>FOR</span> <span class=K>ALL</span> : WordMux4 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.WordMux4;
   <span class=K>FOR</span> <span class=K>ALL</span> : WordMux8 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.WordMux8;
   <span class=K>FOR</span> <span class=K>ALL</span> : ZEXT4 <span class=K>USE</span> <span class=K>ENTITY</span> ece411.ZEXT4;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>
   <span class=C>-- Architecture concurrent statements</span>
   <span class=C>-- HDL Embedded Text Block 1 eb1</span>
   <span class=C>-- Dataout = MDRout</span>
   DATAOUT <= MDRout;


   <span class=C>-- Instance port mappings.</span>
   aADJ11 : ADJ11
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ6 : ADJ6
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aAddr_0 : Address_0
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ADDRESS => ADDRESS_internal,
         clk     => clk,
         ADDR_0  => ADDR_0_internal
      );
   aAdjTrap : AdjTrap
      <span class=K>PORT</span> <span class=K>MAP</span> (
         TrapVect   => TrapVect,
         clk        => clk,
         AdjTrapout => AdjTrapout
      );
   aAlignReg : AlignReg
      <span class=K>PORT</span> <span class=K>MAP</span> (
         RFAout        => RFAout,
         clk           => clk,
         JmpAlignedAdr => JmpAlignedAdr
      );
   aBRadd : BRadd
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ADJ9out => ADJ9out,
         PCout   => PCout,
         clk     => clk,
         Adj9PC  => Adj9PC
      );
   aByteExt : ByteExt
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ADDR_0     => ADDR_0_internal,
         ByteExtSel => ByteExtSel,
         MDRout     => MDRout,
         clk        => clk,
         ByteExtout => ByteExtout
      );
   aGenCC : GenCC
      <span class=K>PORT</span> <span class=K>MAP</span> (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      <span class=K>PORT</span> <span class=K>MAP</span> (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         clk       => clk,
         Dest      => Dest,
         IMMEDIATE => IMMEDIATE,
         JSRR      => JSRR,
         Opcode    => Opcode,
         SHIFTop   => SHIFTop,
         SrcA      => SrcA,
         SrcB      => SrcB,
         TrapVect  => TrapVect,
         imm4      => imm4,
         imm5      => imm5,
         index6    => index6,
         offset11  => offset11,
         offset9   => offset9
      );
   aJSR_R7Sel : JSR_R7Sel
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Dest    => Dest,
         R7Sel_H => R7Sel_H,
         clk     => clk,
         DestReg => DestReg
      );
   aJSRadd : JSRadd
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ADJ11out => ADJ11out,
         PCout    => PCout,
         clk      => clk,
         Adj11PC  => Adj11PC
      );
   aLbyteCopy : LbyteCopy
      <span class=K>PORT</span> <span class=K>MAP</span> (
         ALUout      => ALUout,
         ByteExtSel  => ByteExtSel,
         clk         => clk,
         ByteCopyout => ByteCopyout
      );
   aNZP : NZP
      <span class=K>PORT</span> <span class=K>MAP</span> (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Dest   => Dest,
         clk    => clk,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      <span class=K>PORT</span> <span class=K>MAP</span> (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMar,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      <span class=K>PORT</span> <span class=K>MAP</span> (
         DestReg     => DestReg,
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   SEXTa : SEXT
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         imm5    => imm5,
         SEXTout => SEXTout
      );
   aSEXT6 : SEXT6
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         index6   => index6,
         SEXT6out => SEXT6out
      );
   aStoreMux : StoreMux
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Dest        => Dest,
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         StoreMuxout => StoreMuxout
      );
   MDRMux : WordMux2
      <span class=K>PORT</span> <span class=K>MAP</span> (
         A   => DATAIN,
         B   => ByteCopyout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   MARMux : WordMux4
      <span class=K>PORT</span> <span class=K>MAP</span> (
         A   => PCout,
         B   => ALUout,
         C   => MDRout,
         D   => AdjTrapout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   RFMux : WordMux4
      <span class=K>PORT</span> <span class=K>MAP</span> (
         A   => ByteExtout,
         B   => ALUout,
         C   => Adj9PC,
         D   => PCout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   ALUMux : WordMux8
      <span class=K>PORT</span> <span class=K>MAP</span> (
         A   => RFBout,
         B   => ADJ6out,
         C   => SEXTout,
         D   => SEXT6out,
         E   => ZEXT4out,
         F   => ZEXT4out,
         G   => ZEXT4out,
         H   => ZEXT4out,
         Sel => ALUMuxSel,
         O   => ALUMuxout
      );
   PCMux : WordMux8
      <span class=K>PORT</span> <span class=K>MAP</span> (
         A   => PCPlus2out,
         B   => Adj9PC,
         C   => JmpAlignedAdr,
         D   => Adj11PC,
         E   => MDRout,
         F   => MDRout,
         G   => MDRout,
         H   => MDRout,
         Sel => PCMuxSel,
         O   => PCMuxout
      );
   aZEXT4 : ZEXT4
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         imm4     => imm4,
         ZEXT4out => ZEXT4out
      );

   <span class=C>-- Implicit buffered output assignments</span>
   ADDRESS <= ADDRESS_internal;
   ADDR_0  <= ADDR_0_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
