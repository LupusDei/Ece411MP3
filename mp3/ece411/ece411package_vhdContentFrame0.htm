<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title>ece411package.vhd</title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 00:57:48 on 09/15/11 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>--</span>
<span class=C>-- COMPONENT : LC3B_TYPES</span>
<span class=C>--</span>
<span class=C>-- GENERATED BY SYSTEM ARCHITECT VERSION V8.4_3.7</span>
<span class=C>-- EDITED BY MATT ZAVISLAK FOR ECE 312 MP3 ON NOVEMBER 10, 2000</span>
<span class=C>-- VERSION 2.0</span>
<span class=C>-- EDITED BY DANIEL MANJARRES FOR ECE 411 JANUARY 2010</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> IEEE ;
<span class=K>USE</span> IEEE.STD_LOGIC_1164.<span class=K>ALL</span>;

<span class=K>PACKAGE</span> LC3B_TYPES <span class=K>IS</span>
<span class=C>-- DATAPATH SIGNAL WIDTHS</span>
	<span class=K>SUBTYPE</span> LC3B_PWORD     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(255 <span class=K>DOWNTO</span> 0);  <span class=C>--&quot;POLY&quot; WORD</span>
	<span class=K>SUBTYPE</span> LC3B_OWORD     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(127 <span class=K>DOWNTO</span> 0);  <span class=C>--OCTAL WORD</span>
	<span class=K>SUBTYPE</span> LC3B_QWORD     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(63 <span class=K>DOWNTO</span> 0);  <span class=C>--QUAD WORD</span>
	<span class=K>SUBTYPE</span> LC3B_DWORD     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(31 <span class=K>DOWNTO</span> 0);  <span class=C>--DOUBLE WORD</span>
	<span class=K>SUBTYPE</span> LC3B_WORD      <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(15 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_BYTE      <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(7 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_NIBBLE    <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(3 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_CC        <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_REG       <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_ALUOP     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_SHFTOP    <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(1 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_IMM5      <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(4 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_IMM4      <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(3 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_OFFSET9   <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(8 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_OFFSET11  <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(10 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_INDEX6    <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(5 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_TRAPVECT8 <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(7 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_OPCODE    <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(3 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_4MUX_SEL  <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(1 <span class=K>DOWNTO</span> 0);
	<span class=K>SUBTYPE</span> LC3B_8MUX_SEL  <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
  <span class=K>SUBTYPE</span> LC3B_3DECODE   <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
<span class=C>--CACHE SIGNALS (ADD MORE TO ME!!)</span>
  <span class=K>SUBTYPE</span> LC3B_C_OFFSET  <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(3 <span class=K>DOWNTO</span> 0);
  <span class=K>SUBTYPE</span> LC3B_C_INDEX   <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(2 <span class=K>DOWNTO</span> 0);
  <span class=K>SUBTYPE</span> LC3B_C_TAG     <span class=K>IS</span> <span class=T>STD_LOGIC_VECTOR</span>(8 <span class=K>DOWNTO</span> 0);

	<span class=K>TYPE</span> MEMORY_ARRAY_64K <span class=K>IS</span> <span class=K>ARRAY</span> (0 <span class=K>TO</span> 65535) <span class=K>OF</span> LC3B_BYTE;

	<span class=K>TYPE</span> OPNAME <span class=K>IS</span> (add_op, and_op, not_op, pass_op, sll_op, srl_op, sra_op, bad_op);
	<span class=K>TYPE</span> EX_CONTROL <span class=K>IS</span> <span class=K>RECORD</span>
	    aluop : LC3B_ALUOP;
	<span class=K>END</span> <span class=K>RECORD</span>;

	<span class=K>TYPE</span> CONTROL_WORD <span class=K>IS</span> <span class=K>RECORD</span>
	    ex : EX_CONTROL;
	    mem, wb : LC3B_WORD;
	    name : OPNAME;
	<span class=K>END</span> <span class=K>RECORD</span>;

	<span class=C>-- ALU OP DEFINITIONS</span>
	<span class=K>CONSTANT</span> ALU_ADD  : LC3B_ALUOP := <span class=S>"000"</span>;
	<span class=K>CONSTANT</span> ALU_AND  : LC3B_ALUOP := <span class=S>"001"</span>;
	<span class=K>CONSTANT</span> ALU_NOT  : LC3B_ALUOP := <span class=S>"010"</span>;
	<span class=K>CONSTANT</span> ALU_PASS : LC3B_ALUOP := <span class=S>"011"</span>;
	<span class=K>CONSTANT</span> ALU_SLL  : LC3B_ALUOP := <span class=S>"100"</span>;
	<span class=K>CONSTANT</span> ALU_SRL  : LC3B_ALUOP := <span class=S>"110"</span>;
	<span class=K>CONSTANT</span> ALU_SRA  : LC3B_ALUOP := <span class=S>"111"</span>;

	<span class=C>-- SHIFTER OP DEFINITIONS</span>
	<span class=K>CONSTANT</span> SHFT_SLL : LC3B_SHFTOP := <span class=S>"10"</span>;
	<span class=K>CONSTANT</span> SHFT_SRL : LC3B_SHFTOP := <span class=S>"01"</span>;
	<span class=K>CONSTANT</span> SHFT_SRA : LC3B_SHFTOP := <span class=S>"11"</span>;

	<span class=C>-- INSTRUCTION DEFINITIONS</span>
	<span class=K>CONSTANT</span> OP_ADD  : LC3B_OPCODE := <span class=S>"0001"</span>;
	<span class=K>CONSTANT</span> OP_AND  : LC3B_OPCODE := <span class=S>"0101"</span>;
	<span class=K>CONSTANT</span> OP_BR   : LC3B_OPCODE := <span class=S>"0000"</span>;
	<span class=K>CONSTANT</span> OP_JSR  : LC3B_OPCODE := <span class=S>"0100"</span>;
	<span class=K>CONSTANT</span> OP_JMP  : LC3B_OPCODE := <span class=S>"1100"</span>;
	<span class=K>CONSTANT</span> OP_LDR  : LC3B_OPCODE := <span class=S>"0110"</span>;
	<span class=K>CONSTANT</span> OP_LDB  : LC3B_OPCODE := <span class=S>"0010"</span>;
	<span class=K>CONSTANT</span> OP_LDI  : LC3B_OPCODE := <span class=S>"1010"</span>;
	<span class=K>CONSTANT</span> OP_LEA  : LC3B_OPCODE := <span class=S>"1110"</span>;
	<span class=K>CONSTANT</span> OP_NOT  : LC3B_OPCODE := <span class=S>"1001"</span>;
	<span class=K>CONSTANT</span> OP_RET  : LC3B_OPCODE := <span class=S>"1100"</span>;
	<span class=K>CONSTANT</span> OP_RTI  : LC3B_OPCODE := <span class=S>"1000"</span>;
	<span class=K>CONSTANT</span> OP_SHF  : LC3B_OPCODE := <span class=S>"1101"</span>;
	<span class=K>CONSTANT</span> OP_STR  : LC3B_OPCODE := <span class=S>"0111"</span>;
	<span class=K>CONSTANT</span> OP_STB  : LC3B_OPCODE := <span class=S>"0011"</span>;
	<span class=K>CONSTANT</span> OP_STI  : LC3B_OPCODE := <span class=S>"1011"</span>;
	<span class=K>CONSTANT</span> OP_TRAP : LC3B_OPCODE := <span class=S>"1111"</span>;

	<span class=C>-- TIME DELAYS **********</span>
	<span class=C>-- CHANGED FOR FALL 2009: ALU, ADDER, SHIFTER DELAYS</span>
	<span class=K>CONSTANT</span> HALF_CLOCK_PERIOD  : <span class=T>TIME</span> := 25 NS;
	<span class=K>CONSTANT</span> CLOCK_PERIOD       : <span class=T>TIME</span> := (HALF_CLOCK_PERIOD + HALF_CLOCK_PERIOD);
	<span class=K>CONSTANT</span> DELAY_LOGIC2       : <span class=T>TIME</span> := 1 NS;
	<span class=K>CONSTANT</span> DELAY_LOGIC3       : <span class=T>TIME</span> := 2 NS;
	<span class=K>CONSTANT</span> DELAY_LOGIC4       : <span class=T>TIME</span> := 2 NS;
	<span class=K>CONSTANT</span> DELAY_MUX2         : <span class=T>TIME</span> := 2 NS;
	<span class=K>CONSTANT</span> DELAY_MUX4         : <span class=T>TIME</span> := 4 NS;
	<span class=K>CONSTANT</span> DELAY_MUX8         : <span class=T>TIME</span> := 6 NS;
	<span class=K>CONSTANT</span> DELAY_DECODE3      : <span class=T>TIME</span> := 6 NS;
	<span class=K>CONSTANT</span> DELAY_GENCC        : <span class=T>TIME</span> := 6 NS;
	<span class=K>CONSTANT</span> DELAY_ALU          : <span class=T>TIME</span> := 15 NS;
	<span class=K>CONSTANT</span> DELAY_ADDER        : <span class=T>TIME</span> := 12 NS;
	<span class=K>CONSTANT</span> DELAY_SHIFTER      : <span class=T>TIME</span> := 10 NS;
	<span class=K>CONSTANT</span> DELAY_REGFILE_READ : <span class=T>TIME</span> := 7 NS;
	<span class=K>CONSTANT</span> DELAY_REG          : <span class=T>TIME</span> := 5 NS;
	<span class=K>CONSTANT</span> DELAY_COMPARE8     : <span class=T>TIME</span> := 3 NS;
	<span class=K>CONSTANT</span> DELAY_COMPARE16    : <span class=T>TIME</span> := 4 NS;

	<span class=C>--DELAYS FOR DATA ARRAYS</span>
	<span class=K>CONSTANT</span> DELAY_128B : <span class=T>TIME</span> := 14 NS;
	<span class=K>CONSTANT</span> DELAY_256B : <span class=T>TIME</span> := 20 NS;
	<span class=K>CONSTANT</span> DELAY_512B : <span class=T>TIME</span> := 25 NS;
	<span class=K>CONSTANT</span> DELAY_1KB  : <span class=T>TIME</span> := 35 NS;
	<span class=K>CONSTANT</span> DELAY_2KB  : <span class=T>TIME</span> := 45 NS;
	<span class=K>CONSTANT</span> DELAY_4KB  : <span class=T>TIME</span> := 60 NS;

	<span class=C>--DELAY FOR CONTROL ROM</span>
  <span class=K>CONSTANT</span> DELAY_ROM : <span class=T>TIME</span> := 3 NS;

	<span class=C>--DELAYS FOR DRAM.</span>
	<span class=K>CONSTANT</span> DELAY_MP1_MEM  : <span class=T>TIME</span> := 50 NS;
	<span class=K>CONSTANT</span> DELAY_MP2_MEM  : <span class=T>TIME</span> := 500 NS;
	<span class=K>CONSTANT</span> DELAY_MP22_MEM : <span class=T>TIME</span> := 500 NS;
	<span class=K>CONSTANT</span> DELAY_16B_MEM  : <span class=T>TIME</span> := 500 NS;
	<span class=K>CONSTANT</span> DELAY_32B_MEM  : <span class=T>TIME</span> := 510 NS;
	<span class=K>CONSTANT</span> DELAY_64B_MEM  : <span class=T>TIME</span> := 530 NS;
	<span class=K>CONSTANT</span> DELAY_128B_MEM : <span class=T>TIME</span> := 570 NS;
	<span class=K>CONSTANT</span> DELAY_256B_MEM : <span class=T>TIME</span> := 650 NS;

	<span class=K>PROCEDURE</span> MYDRAMINIT_64K (
		<span class=K>VARIABLE</span> MEM : <span class=A>OUT</span> MEMORY_ARRAY_64K);

<span class=K>END</span> LC3B_TYPES ;

<span class=K>PACKAGE</span> <span class=K>BODY</span> LC3B_TYPES <span class=K>IS</span>

	<span class=K>PROCEDURE</span> MYDRAMINIT_64K (
		<span class=K>VARIABLE</span> MEM : <span class=A>OUT</span> MEMORY_ARRAY_64K) <span class=K>IS</span>
		<span class=K>BEGIN</span>  <span class=C>-- MYDRAMINIT</span>

	    <span class=C>-- USE THE DOIFY.SH SCRIPT TO LOAD PROGRAMS INTO MEMORY, OR </span>
	    <span class=C>-- INSERT YOUR MEMORY VECTORS HERE.</span>
	    <span class=C>-- EXAMPLE: MEM(0) := TO_STDLOGICVECTOR(X&quot;00&quot;);</span>

		MEM(0) := TO_STDLOGICVECTOR(X<span class=S>"11"</span>);
		MEM(1) := TO_STDLOGICVECTOR(X<span class=S>"62"</span>);
		MEM(2) := TO_STDLOGICVECTOR(X<span class=S>"12"</span>);
		MEM(3) := TO_STDLOGICVECTOR(X<span class=S>"64"</span>);
		MEM(4) := TO_STDLOGICVECTOR(X<span class=S>"13"</span>);
		MEM(5) := TO_STDLOGICVECTOR(X<span class=S>"66"</span>);
		MEM(6) := TO_STDLOGICVECTOR(X<span class=S>"C2"</span>);
		MEM(7) := TO_STDLOGICVECTOR(X<span class=S>"18"</span>);
		MEM(8) := TO_STDLOGICVECTOR(X<span class=S>"C3"</span>);
		MEM(9) := TO_STDLOGICVECTOR(X<span class=S>"16"</span>);
		MEM(10) := TO_STDLOGICVECTOR(X<span class=S>"BF"</span>);
		MEM(11) := TO_STDLOGICVECTOR(X<span class=S>"9A"</span>);
		MEM(12) := TO_STDLOGICVECTOR(X<span class=S>"41"</span>);
		MEM(13) := TO_STDLOGICVECTOR(X<span class=S>"1B"</span>);
		MEM(14) := TO_STDLOGICVECTOR(X<span class=S>"05"</span>);
		MEM(15) := TO_STDLOGICVECTOR(X<span class=S>"19"</span>);
		MEM(16) := TO_STDLOGICVECTOR(X<span class=S>"FB"</span>);
		MEM(17) := TO_STDLOGICVECTOR(X<span class=S>"07"</span>);
		MEM(18) := TO_STDLOGICVECTOR(X<span class=S>"C4"</span>);
		MEM(19) := TO_STDLOGICVECTOR(X<span class=S>"5E"</span>);
		MEM(20) := TO_STDLOGICVECTOR(X<span class=S>"14"</span>);
		MEM(21) := TO_STDLOGICVECTOR(X<span class=S>"7E"</span>);
		MEM(22) := TO_STDLOGICVECTOR(X<span class=S>"14"</span>);
		MEM(23) := TO_STDLOGICVECTOR(X<span class=S>"62"</span>);
		MEM(24) := TO_STDLOGICVECTOR(X<span class=S>"FF"</span>);
		MEM(25) := TO_STDLOGICVECTOR(X<span class=S>"91"</span>);
		MEM(26) := TO_STDLOGICVECTOR(X<span class=S>"40"</span>);
		MEM(27) := TO_STDLOGICVECTOR(X<span class=S>"50"</span>);
		MEM(28) := TO_STDLOGICVECTOR(X<span class=S>"14"</span>);
		MEM(29) := TO_STDLOGICVECTOR(X<span class=S>"70"</span>);
		MEM(30) := TO_STDLOGICVECTOR(X<span class=S>"15"</span>);
		MEM(31) := TO_STDLOGICVECTOR(X<span class=S>"62"</span>);
		MEM(32) := TO_STDLOGICVECTOR(X<span class=S>"FF"</span>);
		MEM(33) := TO_STDLOGICVECTOR(X<span class=S>"0F"</span>);
		MEM(34) := TO_STDLOGICVECTOR(X<span class=S>"01"</span>);
		MEM(35) := TO_STDLOGICVECTOR(X<span class=S>"00"</span>);
		MEM(36) := TO_STDLOGICVECTOR(X<span class=S>"02"</span>);
		MEM(37) := TO_STDLOGICVECTOR(X<span class=S>"00"</span>);
		MEM(38) := TO_STDLOGICVECTOR(X<span class=S>"08"</span>);
		MEM(39) := TO_STDLOGICVECTOR(X<span class=S>"00"</span>);
		MEM(40) := TO_STDLOGICVECTOR(X<span class=S>"00"</span>);
		MEM(41) := TO_STDLOGICVECTOR(X<span class=S>"00"</span>);
		MEM(42) := TO_STDLOGICVECTOR(X<span class=S>"0D"</span>);
		MEM(43) := TO_STDLOGICVECTOR(X<span class=S>"60"</span>);
		<span class=C>--MAKE NO CHANGES AFTER THIS LINE.</span>
	<span class=K>END</span> MYDRAMINIT_64K;

<span class=K>END</span> LC3B_TYPES;</pre>
<SCRIPT SRC="../scripts/is.js"></SCRIPT><SCRIPT SRC="../scripts/imageFrame.js"></SCRIPT>
</body>
