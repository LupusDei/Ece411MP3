-- VHDL Entity ece411.Arbiter.symbol
--
-- Created:
--          by - martin43.UNKNOWN (evrt-252-30.ews.illinois.edu)
--          at - 20:04:29 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Arbiter IS
   PORT( 
      clk        : IN     std_logic;
      dpmaddress : IN     lc3b_word;
      dpmdataout : IN     lc3b_oword;
      dpmread_l  : IN     std_logic;
      dpmwrite_l : IN     std_logic;
      ipmaddress : IN     lc3b_word;
      ipmdataout : IN     lc3b_oword;
      ipmread_l  : IN     std_logic;
      ipmwrite_l : IN     std_logic;
      mDataIn    : IN     LC3b_oword;
      mresp_h    : IN     std_logic;
      reset_l    : IN     std_logic;
      address    : OUT    lc3b_word;
      dataout    : OUT    lc3b_oword;
      dpmdatain  : OUT    lc3b_oword;
      dpmresp_h  : OUT    std_logic;
      ipmdatain  : OUT    lc3b_oword;
      ipmresp_h  : OUT    std_logic;
      mread_l    : OUT    std_logic;
      mwrite_l   : OUT    std_logic
   );

-- Declarations

END Arbiter ;

--
-- VHDL Architecture ece411.Arbiter.struct
--
-- Created:
--          by - martin43.UNKNOWN (evrt-252-30.ews.illinois.edu)
--          at - 20:04:29 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Arbiter IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addrMuxSel    : std_logic;
   SIGNAL dataOutMuxSel : std_logic;
   SIGNAL dpmrespSel    : std_logic;
   SIGNAL ipmrespSel    : std_logic;
   SIGNAL zeroSignal    : std_logic;


   -- Component Declarations
   COMPONENT ArbiterController
   PORT (
      clk           : IN     std_logic ;
      dpmread_l     : IN     std_logic ;
      dpmwrite_l    : IN     std_logic ;
      ipmread_l     : IN     std_logic ;
      ipmwrite_l    : IN     std_logic ;
      mresp_h       : IN     std_logic ;
      reset_l       : IN     std_logic ;
      addrMuxSel    : OUT    std_logic ;
      dataOutMuxSel : OUT    std_logic ;
      dpmrespSel    : OUT    std_logic ;
      ipmrespSel    : OUT    std_logic ;
      mread_l       : OUT    std_logic ;
      mwrite_l      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Bit2Mux
   PORT (
      a   : IN     std_logic ;
      b   : IN     std_logic ;
      sel : IN     std_logic ;
      o   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT genZero
   PORT (
      zeroSignal : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT oWord2Mux
   PORT (
      A   : IN     lc3b_oword ;
      B   : IN     lc3b_oword ;
      Sel : IN     std_logic ;
      O   : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT pass
   PORT (
      mDataIn   : IN     LC3b_oword ;
      dpmdatain : OUT    lc3b_oword ;
      ipmdatain : OUT    lc3b_oword 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ArbiterController USE ENTITY ece411.ArbiterController;
   FOR ALL : Bit2Mux USE ENTITY ece411.Bit2Mux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : genZero USE ENTITY ece411.genZero;
   FOR ALL : oWord2Mux USE ENTITY ece411.oWord2Mux;
   FOR ALL : pass USE ENTITY ece411.pass;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   arbControl : ArbiterController
      PORT MAP (
         clk           => clk,
         dpmread_l     => dpmread_l,
         dpmwrite_l    => dpmwrite_l,
         ipmread_l     => ipmread_l,
         ipmwrite_l    => ipmwrite_l,
         mresp_h       => mresp_h,
         reset_l       => reset_l,
         addrMuxSel    => addrMuxSel,
         dataOutMuxSel => dataOutMuxSel,
         dpmrespSel    => dpmrespSel,
         ipmrespSel    => ipmrespSel,
         mread_l       => mread_l,
         mwrite_l      => mwrite_l
      );
   dpmrespMux : Bit2Mux
      PORT MAP (
         a   => zeroSignal,
         b   => mresp_h,
         sel => dpmrespSel,
         o   => dpmresp_h
      );
   ipmrespMux : Bit2Mux
      PORT MAP (
         a   => zeroSignal,
         b   => mresp_h,
         sel => ipmrespSel,
         o   => ipmresp_h
      );
   addrMux : WordMux2
      PORT MAP (
         A   => dpmaddress,
         B   => ipmaddress,
         Sel => addrMuxSel,
         F   => address
      );
   zero_gen : genZero
      PORT MAP (
         zeroSignal => zeroSignal
      );
   dataOutMux : oWord2Mux
      PORT MAP (
         A   => dpmdataout,
         B   => ipmdataout,
         Sel => dataOutMuxSel,
         O   => dataout
      );
   passData : pass
      PORT MAP (
         mDataIn   => mDataIn,
         dpmdatain => dpmdatain,
         ipmdatain => ipmdatain
      );

END struct;
