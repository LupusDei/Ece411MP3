-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - martin43.UNKNOWN (gelib-057-28.ews.illinois.edu)
--          at - 20:32:15 09/30/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel  : IN     LC3b_8Mux_Sel;
      ALUop      : IN     LC3b_aluop;
      ByteExtSel : IN     std_logic;
      DATAIN     : IN     LC3b_word;
      LoadIR     : IN     std_logic;
      LoadMDR    : IN     std_logic;
      LoadMar    : IN     std_logic;
      LoadNZP    : IN     std_logic;
      LoadPC     : IN     std_logic;
      MARMuxSel  : IN     LC3b_4Mux_Sel;
      MDRMuxSel  : IN     std_logic;
      PCMuxSel   : IN     LC3b_8Mux_Sel;
      R7Sel_H    : IN     std_logic;
      RESET_L    : IN     std_logic;
      RFMuxSel   : IN     LC3b_4Mux_Sel;
      RegWrite   : IN     std_logic;
      StoreSR    : IN     std_logic;
      clk        : IN     std_logic;
      ADDRESS    : OUT    LC3b_word;
      ADDR_0     : OUT    std_logic;
      CheckN     : OUT    std_logic;
      CheckP     : OUT    std_logic;
      CheckZ     : OUT    std_logic;
      DATAOUT    : OUT    LC3b_word;
      IMMEDIATE  : OUT    std_logic;
      JSRR       : OUT    std_logic;
      Opcode     : OUT    LC3b_opcode;
      SHIFTop    : OUT    lc3b_shftop;
      n          : OUT    std_logic;
      p          : OUT    std_logic;
      z          : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - martin43.UNKNOWN (gelib-057-28.ews.illinois.edu)
--          at - 20:32:16 09/30/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out      : LC3b_word;
   SIGNAL ADJ6out       : LC3b_word;
   SIGNAL ADJ9out       : LC3b_word;
   SIGNAL ALUMuxout     : LC3b_word;
   SIGNAL ALUout        : LC3b_word;
   SIGNAL Adj11PC       : LC3b_word;
   SIGNAL Adj9PC        : LC3b_word;
   SIGNAL AdjTrapout    : LC3b_word;
   SIGNAL ByteCopyout   : LC3b_word;
   SIGNAL ByteExtout    : LC3b_word;
   SIGNAL Dest          : LC3b_reg;
   SIGNAL DestReg       : LC3b_reg;
   SIGNAL GenCCout      : LC3b_cc;
   SIGNAL JmpAlignedAdr : LC3b_word;
   SIGNAL MARMuxout     : LC3b_word;
   SIGNAL MDRMuxout     : LC3b_word;
   SIGNAL MDRout        : LC3b_word;
   SIGNAL PCMuxout      : LC3b_word;
   SIGNAL PCPlus2out    : LC3b_word;
   SIGNAL PCout         : LC3b_word;
   SIGNAL RFAout        : LC3b_word;
   SIGNAL RFBout        : LC3b_word;
   SIGNAL RFMuxout      : LC3b_word;
   SIGNAL SEXT6out      : LC3b_word;
   SIGNAL SEXTout       : LC3b_word;
   SIGNAL SrcA          : LC3b_reg;
   SIGNAL SrcB          : LC3b_reg;
   SIGNAL StoreMuxout   : LC3b_reg;
   SIGNAL TrapVect      : LC3b_trapvect8;
   SIGNAL ZEXT4out      : lc3b_word;
   SIGNAL imm4          : LC3b_imm4;
   SIGNAL imm5          : LC3b_imm5;
   SIGNAL index6        : LC3b_index6;
   SIGNAL offset11      : LC3b_offset11;
   SIGNAL offset9       : LC3b_offset9;

   -- Implicit buffer signal declarations
   SIGNAL ADDRESS_internal : LC3b_word;
   SIGNAL ADDR_0_internal  : std_logic;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      clk      : IN     std_logic ;
      offset11 : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      clk     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      clk     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMuxout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      RFAout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Address_0
   PORT (
      ADDRESS : IN     LC3b_word ;
      clk     : IN     std_logic ;
      ADDR_0  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AdjTrap
   PORT (
      TrapVect   : IN     LC3b_trapvect8 ;
      clk        : IN     std_logic ;
      AdjTrapout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT AlignReg
   PORT (
      RFAout        : IN     LC3b_word ;
      clk           : IN     std_logic ;
      JmpAlignedAdr : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BRadd
   PORT (
      ADJ9out : IN     LC3b_word ;
      PCout   : IN     LC3b_word ;
      clk     : IN     std_logic ;
      Adj9PC  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ByteExt
   PORT (
      ADDR_0     : IN     std_logic ;
      ByteExtSel : IN     std_logic ;
      MDRout     : IN     LC3b_word ;
      clk        : IN     std_logic ;
      ByteExtout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      RFMuxout : IN     LC3b_word ;
      clk      : IN     std_logic ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      clk       : IN     std_logic ;
      Dest      : OUT    LC3b_reg ;
      IMMEDIATE : OUT    std_logic ;
      JSRR      : OUT    std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SHIFTop   : OUT    lc3b_shftop ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    LC3b_reg ;
      TrapVect  : OUT    LC3b_trapvect8 ;
      imm4      : OUT    LC3b_imm4 ;
      imm5      : OUT    LC3b_imm5 ;
      index6    : OUT    LC3b_index6 ;
      offset11  : OUT    LC3b_offset11 ;
      offset9   : OUT    LC3b_offset9 
   );
   END COMPONENT;
   COMPONENT JSR_R7Sel
   PORT (
      Dest    : IN     LC3b_reg ;
      R7Sel_H : IN     std_logic ;
      clk     : IN     std_logic ;
      DestReg : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT JSRadd
   PORT (
      ADJ11out : IN     LC3b_word ;
      PCout    : IN     LC3b_word ;
      clk      : IN     std_logic ;
      Adj11PC  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT LbyteCopy
   PORT (
      ALUout      : IN     LC3b_word ;
      ByteExtSel  : IN     std_logic ;
      clk         : IN     std_logic ;
      ByteCopyout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      Dest   : IN     LC3b_reg ;
      clk    : IN     std_logic ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      clk        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      Input  : IN     LC3b_word ;
      RESET  : IN     std_logic ;
      clk    : IN     std_logic ;
      load   : IN     std_logic ;
      Output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      DestReg     : IN     LC3b_reg ;
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     LC3b_reg ;
      StoreMuxout : IN     LC3b_reg ;
      clk         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT
   PORT (
      clk     : IN     std_logic ;
      imm5    : IN     LC3b_imm5 ;
      SEXTout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      clk      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      SEXT6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      Dest        : IN     LC3b_reg ;
      SrcA        : IN     LC3b_reg ;
      StoreSR     : IN     std_logic ;
      clk         : IN     std_logic ;
      StoreMuxout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      E   : IN     LC3b_word ;
      F   : IN     LC3b_word ;
      G   : IN     LC3b_word ;
      H   : IN     LC3b_word ;
      Sel : IN     LC3b_8MUX_SEL ;
      O   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT4
   PORT (
      clk      : IN     std_logic ;
      imm4     : IN     LC3b_imm4 ;
      ZEXT4out : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : Address_0 USE ENTITY ece411.Address_0;
   FOR ALL : AdjTrap USE ENTITY ece411.AdjTrap;
   FOR ALL : AlignReg USE ENTITY ece411.AlignReg;
   FOR ALL : BRadd USE ENTITY ece411.BRadd;
   FOR ALL : ByteExt USE ENTITY ece411.ByteExt;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : JSR_R7Sel USE ENTITY ece411.JSR_R7Sel;
   FOR ALL : JSRadd USE ENTITY ece411.JSRadd;
   FOR ALL : LbyteCopy USE ENTITY ece411.LbyteCopy;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : SEXT USE ENTITY ece411.SEXT;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : ZEXT4 USE ENTITY ece411.ZEXT4;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Dataout = MDRout
   DATAOUT <= MDRout;                        


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         clk      => clk,
         offset11 => offset11,
         ADJ11out => ADJ11out
      );
   aADJ6 : ADJ6
      PORT MAP (
         clk     => clk,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         clk     => clk,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMuxout => ALUMuxout,
         ALUop     => ALUop,
         RFAout    => RFAout,
         clk       => clk,
         ALUout    => ALUout
      );
   aAddr_0 : Address_0
      PORT MAP (
         ADDRESS => ADDRESS_internal,
         clk     => clk,
         ADDR_0  => ADDR_0_internal
      );
   aAdjTrap : AdjTrap
      PORT MAP (
         TrapVect   => TrapVect,
         clk        => clk,
         AdjTrapout => AdjTrapout
      );
   aAlignReg : AlignReg
      PORT MAP (
         RFAout        => RFAout,
         clk           => clk,
         JmpAlignedAdr => JmpAlignedAdr
      );
   aBRadd : BRadd
      PORT MAP (
         ADJ9out => ADJ9out,
         PCout   => PCout,
         clk     => clk,
         Adj9PC  => Adj9PC
      );
   aByteExt : ByteExt
      PORT MAP (
         ADDR_0     => ADDR_0_internal,
         ByteExtSel => ByteExtSel,
         MDRout     => MDRout,
         clk        => clk,
         ByteExtout => ByteExtout
      );
   aGenCC : GenCC
      PORT MAP (
         RFMuxout => RFMuxout,
         clk      => clk,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         clk       => clk,
         Dest      => Dest,
         IMMEDIATE => IMMEDIATE,
         JSRR      => JSRR,
         Opcode    => Opcode,
         SHIFTop   => SHIFTop,
         SrcA      => SrcA,
         SrcB      => SrcB,
         TrapVect  => TrapVect,
         imm4      => imm4,
         imm5      => imm5,
         index6    => index6,
         offset11  => offset11,
         offset9   => offset9
      );
   aJSR_R7Sel : JSR_R7Sel
      PORT MAP (
         Dest    => Dest,
         R7Sel_H => R7Sel_H,
         clk     => clk,
         DestReg => DestReg
      );
   aJSRadd : JSRadd
      PORT MAP (
         ADJ11out => ADJ11out,
         PCout    => PCout,
         clk      => clk,
         Adj11PC  => Adj11PC
      );
   aLbyteCopy : LbyteCopy
      PORT MAP (
         ALUout      => ALUout,
         ByteExtSel  => ByteExtSel,
         clk         => clk,
         ByteCopyout => ByteCopyout
      );
   aNZP : NZP
      PORT MAP (
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         Dest   => Dest,
         clk    => clk,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         clk        => clk,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         Input  => MARMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMar,
         Output => ADDRESS_internal
      );
   MDR : Reg16
      PORT MAP (
         Input  => MDRMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadMDR,
         Output => MDRout
      );
   PC : Reg16
      PORT MAP (
         Input  => PCMuxout,
         RESET  => RESET_L,
         clk    => clk,
         load   => LoadPC,
         Output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         DestReg     => DestReg,
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         clk         => clk,
         RFAout      => RFAout,
         RFBout      => RFBout
      );
   SEXTa : SEXT
      PORT MAP (
         clk     => clk,
         imm5    => imm5,
         SEXTout => SEXTout
      );
   aSEXT6 : SEXT6
      PORT MAP (
         clk      => clk,
         index6   => index6,
         SEXT6out => SEXT6out
      );
   aStoreMux : StoreMux
      PORT MAP (
         Dest        => Dest,
         SrcA        => SrcA,
         StoreSR     => StoreSR,
         clk         => clk,
         StoreMuxout => StoreMuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ByteCopyout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   MARMux : WordMux4
      PORT MAP (
         A   => PCout,
         B   => ALUout,
         C   => MDRout,
         D   => AdjTrapout,
         Sel => MARMuxSel,
         F   => MARMuxout
      );
   RFMux : WordMux4
      PORT MAP (
         A   => ByteExtout,
         B   => ALUout,
         C   => Adj9PC,
         D   => PCout,
         Sel => RFMuxSel,
         F   => RFMuxout
      );
   ALUMux : WordMux8
      PORT MAP (
         A   => RFBout,
         B   => ADJ6out,
         C   => SEXTout,
         D   => SEXT6out,
         E   => ZEXT4out,
         F   => ZEXT4out,
         G   => ZEXT4out,
         H   => ZEXT4out,
         Sel => ALUMuxSel,
         O   => ALUMuxout
      );
   PCMux : WordMux8
      PORT MAP (
         A   => PCPlus2out,
         B   => Adj9PC,
         C   => JmpAlignedAdr,
         D   => Adj11PC,
         E   => MDRout,
         F   => MDRout,
         G   => MDRout,
         H   => MDRout,
         Sel => PCMuxSel,
         O   => PCMuxout
      );
   aZEXT4 : ZEXT4
      PORT MAP (
         clk      => clk,
         imm4     => imm4,
         ZEXT4out => ZEXT4out
      );

   -- Implicit buffered output assignments
   ADDRESS <= ADDRESS_internal;
   ADDR_0  <= ADDR_0_internal;

END struct;
