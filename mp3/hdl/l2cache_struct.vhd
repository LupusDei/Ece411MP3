-- VHDL Entity ece411.L2Cache.symbol
--
-- Created:
--          by - martin43.UNKNOWN (gelib-057-19.ews.illinois.edu)
--          at - 12:51:40 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2Cache IS
   PORT( 
      ADDRESS    : IN     LC3b_word;
      DATAOUT    : IN     LC3b_oword;
      MREAD_L    : IN     std_logic;
      MWRITE_L   : IN     std_logic;
      RESET_L    : IN     std_logic;
      clk        : IN     std_logic;
      in_Load    : IN     std_logic;
      in_idlehit : IN     std_logic;
      pmdatain   : IN     lc3b_oword;
      DATAIN     : OUT    LC3b_oword;
      Dirty      : OUT    std_logic;
      Hit        : OUT    std_logic;
      MRESP_H    : OUT    std_logic;
      Miss       : OUT    std_logic;
      pmaddress  : OUT    LC3b_word;
      pmdataout  : OUT    lc3b_oword
   );

-- Declarations

END L2Cache ;

--
-- VHDL Architecture ece411.L2Cache.struct
--
-- Created:
--          by - martin43.UNKNOWN (gelib-057-19.ews.illinois.edu)
--          at - 12:51:41 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF L2Cache IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DirtyOut0   : std_logic;
   SIGNAL DirtyOut1   : std_logic;
   SIGNAL DirtyOut2   : std_logic;
   SIGNAL DirtyOut3   : std_logic;
   SIGNAL DirtyOut4   : std_logic;
   SIGNAL DirtyOut5   : std_logic;
   SIGNAL DirtyOut6   : std_logic;
   SIGNAL DirtyOut7   : std_logic;
   SIGNAL LRUOut      : lc3b_8mux_sel;
   SIGNAL PreHit0     : std_logic;
   SIGNAL PreHit1     : std_logic;
   SIGNAL PreHit2     : std_logic;
   SIGNAL PreHit3     : std_logic;
   SIGNAL PreHit4     : std_logic;
   SIGNAL PreHit5     : std_logic;
   SIGNAL PreHit6     : std_logic;
   SIGNAL PreHit7     : std_logic;
   SIGNAL TagOut0     : lc3b_c_tag;
   SIGNAL TagOut1     : lc3b_c_tag;
   SIGNAL TagOut2     : lc3b_c_tag;
   SIGNAL TagOut3     : lc3b_c_tag;
   SIGNAL TagOut4     : lc3b_c_tag;
   SIGNAL TagOut5     : lc3b_c_tag;
   SIGNAL TagOut6     : lc3b_c_tag;
   SIGNAL TagOut7     : lc3b_c_tag;
   SIGNAL TaqOut5     : lc3b_c_tag;
   SIGNAL WayDataIn   : lc3b_oword;
   SIGNAL WayDataOut0 : lc3b_oword;
   SIGNAL WayDataOut1 : lc3b_oword;
   SIGNAL WayDataOut2 : lc3b_oword;
   SIGNAL WayDataOut3 : lc3b_oword;
   SIGNAL WayDataOut4 : lc3b_oword;
   SIGNAL WayDataOut5 : lc3b_oword;
   SIGNAL WayDataOut6 : lc3b_oword;
   SIGNAL WayDataOut7 : lc3b_oword;
   SIGNAL WaySelect0  : std_logic;
   SIGNAL WaySelect1  : std_logic;
   SIGNAL WaySelect2  : std_logic;
   SIGNAL WaySelect3  : std_logic;
   SIGNAL WaySelect4  : std_logic;
   SIGNAL WaySelect5  : std_logic;
   SIGNAL WaySelect6  : std_logic;
   SIGNAL WaySelect7  : std_logic;
   SIGNAL WriteAccess : std_logic;
   SIGNAL active      : std_logic;
   SIGNAL dataSel     : lc3b_8MUX_Sel;
   SIGNAL index       : lc3b_c_index;
   SIGNAL tag         : lc3b_c_tag;
   SIGNAL tagIn       : lc3b_c_tag;
   SIGNAL tagout      : lc3b_c_tag;

   -- Implicit buffer signal declarations
   SIGNAL Hit_internal : std_logic;


   -- Component Declarations
   COMPONENT Encoder8in
   PORT (
      PreHit0 : IN     std_logic ;
      PreHit1 : IN     std_logic ;
      PreHit2 : IN     std_logic ;
      PreHit3 : IN     std_logic ;
      PreHit4 : IN     std_logic ;
      PreHit5 : IN     std_logic ;
      PreHit6 : IN     std_logic ;
      PreHit7 : IN     std_logic ;
      dataSel : OUT    lc3b_8MUX_Sel 
   );
   END COMPONENT;
   COMPONENT Hit8InCalc
   PORT (
      PreHit0    : IN     std_logic ;
      PreHit1    : IN     std_logic ;
      PreHit2    : IN     std_logic ;
      PreHit3    : IN     std_logic ;
      PreHit4    : IN     std_logic ;
      PreHit5    : IN     std_logic ;
      PreHit6    : IN     std_logic ;
      PreHit7    : IN     std_logic ;
      active     : IN     std_logic ;
      clk        : IN     std_logic ;
      in_idlehit : IN     std_logic ;
      Hit        : OUT    std_logic ;
      Miss       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRUTruth
   PORT (
      Hit     : IN     std_logic ;
      PreHit0 : IN     std_logic ;
      PreHit1 : IN     std_logic ;
      PreHit2 : IN     std_logic ;
      PreHit3 : IN     std_logic ;
      PreHit4 : IN     std_logic ;
      PreHit5 : IN     std_logic ;
      PreHit6 : IN     std_logic ;
      PreHit7 : IN     std_logic ;
      RESET_L : IN     std_logic ;
      index   : IN     lc3b_c_index ;
      LRUOut  : OUT    lc3b_8mux_sel 
   );
   END COMPONENT;
   COMPONENT MemAddrCalc
   PORT (
      index     : IN     lc3b_c_index ;
      tagIn     : IN     lc3b_c_tag ;
      pmaddress : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Splitter1
   PORT (
      ADDRESS : IN     LC3b_word ;
      index   : OUT    lc3b_c_index ;
      tag     : OUT    lc3b_c_tag 
   );
   END COMPONENT;
   COMPONENT Tag2Mux
   PORT (
      sel    : IN     std_logic ;
      tag0   : IN     lc3b_c_tag ;
      tag1   : IN     lc3b_c_tag ;
      tagOut : OUT    lc3b_c_tag 
   );
   END COMPONENT;
   COMPONENT WayUnit
   PORT (
      Hit         : IN     std_logic ;
      RESET_L     : IN     std_logic ;
      WayDataIn   : IN     lc3b_oword ;
      WaySelect   : IN     std_logic ;
      WriteAccess : IN     std_logic ;
      clk         : IN     std_logic ;
      in_Load     : IN     std_logic ;
      index       : IN     lc3b_c_index ;
      tag         : IN     lc3b_c_tag ;
      DirtyOut    : OUT    std_logic ;
      PreHit      : OUT    std_logic ;
      TagOut      : OUT    lc3b_c_tag ;
      WayDataOut  : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT Worthless2
   PORT (
      Hit     : IN     std_logic ;
      MRESP_H : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT bit8Mux
   PORT (
      a0  : IN     std_logic ;
      a1  : IN     std_logic ;
      a2  : IN     std_logic ;
      a3  : IN     std_logic ;
      a4  : IN     std_logic ;
      a5  : IN     std_logic ;
      a6  : IN     std_logic ;
      a7  : IN     std_logic ;
      sel : IN     lc3b_8mux_sel ;
      O   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT my2NAND
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      z : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT myNOT
   PORT (
      a     : IN     std_logic ;
      a_not : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT oWord2Mux
   PORT (
      A   : IN     lc3b_oword ;
      B   : IN     lc3b_oword ;
      Sel : IN     std_logic ;
      O   : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT oWordMux8
   PORT (
      a0       : IN     lc3b_oword ;
      a1       : IN     lc3b_oword ;
      a2       : IN     lc3b_oword ;
      a3       : IN     lc3b_oword ;
      a4       : IN     lc3b_oword ;
      a5       : IN     lc3b_oword ;
      a6       : IN     lc3b_oword ;
      a7       : IN     lc3b_oword ;
      sel      : IN     lc3b_8Mux_sel ;
      oWordOut : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT tag8Mux
   PORT (
      a0     : IN     lc3b_c_tag ;
      a1     : IN     lc3b_c_tag ;
      a2     : IN     lc3b_c_tag ;
      a3     : IN     lc3b_c_tag ;
      a4     : IN     lc3b_c_tag ;
      a5     : IN     lc3b_c_tag ;
      a6     : IN     lc3b_c_tag ;
      a7     : IN     lc3b_c_tag ;
      sel    : IN     lc3b_8mux_sel ;
      tagout : OUT    lc3b_c_tag 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Encoder8in USE ENTITY ece411.Encoder8in;
   FOR ALL : Hit8InCalc USE ENTITY ece411.Hit8InCalc;
   FOR ALL : LRUTruth USE ENTITY ece411.LRUTruth;
   FOR ALL : MemAddrCalc USE ENTITY ece411.MemAddrCalc;
   FOR ALL : Splitter1 USE ENTITY ece411.Splitter1;
   FOR ALL : Tag2Mux USE ENTITY ece411.Tag2Mux;
   FOR ALL : WayUnit USE ENTITY ece411.WayUnit;
   FOR ALL : Worthless2 USE ENTITY ece411.Worthless2;
   FOR ALL : bit8Mux USE ENTITY ece411.bit8Mux;
   FOR ALL : my2NAND USE ENTITY ece411.my2NAND;
   FOR ALL : myNOT USE ENTITY ece411.myNOT;
   FOR ALL : oWord2Mux USE ENTITY ece411.oWord2Mux;
   FOR ALL : oWordMux8 USE ENTITY ece411.oWordMux8;
   FOR ALL : tag8Mux USE ENTITY ece411.tag8Mux;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   dataSelector : Encoder8in
      PORT MAP (
         PreHit0 => PreHit0,
         PreHit1 => PreHit1,
         PreHit2 => PreHit2,
         PreHit3 => PreHit3,
         PreHit4 => PreHit4,
         PreHit5 => PreHit5,
         PreHit6 => PreHit6,
         PreHit7 => PreHit7,
         dataSel => dataSel
      );
   L2HitMiss : Hit8InCalc
      PORT MAP (
         PreHit0    => PreHit0,
         PreHit1    => PreHit1,
         PreHit2    => PreHit2,
         PreHit3    => PreHit3,
         PreHit4    => PreHit4,
         PreHit5    => PreHit5,
         PreHit6    => PreHit6,
         PreHit7    => PreHit7,
         active     => active,
         clk        => clk,
         in_idlehit => in_idlehit,
         Hit        => Hit_internal,
         Miss       => Miss
      );
   Trueness : LRUTruth
      PORT MAP (
         Hit     => Hit_internal,
         PreHit0 => PreHit0,
         PreHit1 => PreHit1,
         PreHit2 => PreHit2,
         PreHit3 => PreHit3,
         PreHit4 => PreHit4,
         PreHit5 => PreHit5,
         PreHit6 => PreHit6,
         PreHit7 => PreHit7,
         RESET_L => RESET_L,
         index   => index,
         LRUOut  => LRUOut
      );
   TagNIndex : MemAddrCalc
      PORT MAP (
         index     => index,
         tagIn     => tagIn,
         pmaddress => pmaddress
      );
   aSplitter : Splitter1
      PORT MAP (
         ADDRESS => ADDRESS,
         index   => index,
         tag     => tag
      );
   tagMux : Tag2Mux
      PORT MAP (
         sel    => in_Load,
         tag0   => tagout,
         tag1   => tag,
         tagOut => tagIn
      );
   WayUnit0 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect0,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut0,
         PreHit      => PreHit0,
         TagOut      => TagOut0,
         WayDataOut  => WayDataOut0
      );
   WayUnit1 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect1,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut1,
         PreHit      => PreHit1,
         TagOut      => TagOut1,
         WayDataOut  => WayDataOut1
      );
   WayUnit2 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect2,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut2,
         PreHit      => PreHit2,
         TagOut      => TagOut2,
         WayDataOut  => WayDataOut2
      );
   WayUnit3 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect3,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut3,
         PreHit      => PreHit3,
         TagOut      => TagOut3,
         WayDataOut  => WayDataOut3
      );
   WayUnit4 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect4,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut4,
         PreHit      => PreHit4,
         TagOut      => TagOut4,
         WayDataOut  => WayDataOut4
      );
   WayUnit5 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect5,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut5,
         PreHit      => PreHit5,
         TagOut      => TagOut5,
         WayDataOut  => WayDataOut5
      );
   WayUnit6 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect6,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut6,
         PreHit      => PreHit6,
         TagOut      => TagOut6,
         WayDataOut  => WayDataOut6
      );
   WayUnit7 : WayUnit
      PORT MAP (
         Hit         => Hit_internal,
         RESET_L     => RESET_L,
         WayDataIn   => WayDataIn,
         WaySelect   => WaySelect7,
         WriteAccess => WriteAccess,
         clk         => clk,
         in_Load     => in_Load,
         index       => index,
         tag         => tag,
         DirtyOut    => DirtyOut7,
         PreHit      => PreHit7,
         TagOut      => TagOut7,
         WayDataOut  => WayDataOut7
      );
   Bit2Bit : Worthless2
      PORT MAP (
         Hit     => Hit_internal,
         MRESP_H => MRESP_H
      );
   Dirty8Mux : bit8Mux
      PORT MAP (
         a0  => DirtyOut0,
         a1  => DirtyOut1,
         a2  => DirtyOut2,
         a3  => DirtyOut3,
         a4  => DirtyOut4,
         a5  => DirtyOut5,
         a6  => DirtyOut6,
         a7  => DirtyOut7,
         sel => LRUOut,
         O   => Dirty
      );
   activeNand : my2NAND
      PORT MAP (
         A => MWRITE_L,
         B => MREAD_L,
         z => active
      );
   U_0 : myNOT
      PORT MAP (
         a     => MWRITE_L,
         a_not => WriteAccess
      );
   WayDataInMux : oWord2Mux
      PORT MAP (
         A   => DATAOUT,
         B   => pmdatain,
         Sel => in_Load,
         O   => WayDataIn
      );
   WayDataOutMux : oWordMux8
      PORT MAP (
         a0       => WayDataOut0,
         a1       => WayDataOut1,
         a2       => WayDataOut2,
         a3       => WayDataOut3,
         a4       => WayDataOut4,
         a5       => WayDataOut5,
         a6       => WayDataOut6,
         a7       => WayDataOut7,
         sel      => dataSel,
         oWordOut => DATAIN
      );
   pmWayDataOutMux : oWordMux8
      PORT MAP (
         a0       => WayDataOut0,
         a1       => WayDataOut1,
         a2       => WayDataOut2,
         a3       => WayDataOut3,
         a4       => WayDataOut4,
         a5       => WayDataOut5,
         a6       => WayDataOut6,
         a7       => WayDataOut7,
         sel      => LRUOut,
         oWordOut => pmdataout
      );
   preTagMux : tag8Mux
      PORT MAP (
         a0     => TagOut0,
         a1     => TagOut1,
         a2     => TagOut2,
         a3     => TagOut3,
         a4     => TagOut4,
         a5     => TaqOut5,
         a6     => TagOut6,
         a7     => TagOut7,
         sel    => LRUOut,
         tagout => tagout
      );

   -- Implicit buffered output assignments
   Hit <= Hit_internal;

END struct;
