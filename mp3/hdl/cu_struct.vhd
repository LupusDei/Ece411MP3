-- VHDL Entity ece411.CU.interface
--
-- Created:
--          by - bhatia9.UNKNOWN (gelib-057-01.ews.illinois.edu)
--          at - 03:20:31 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY CU IS
   PORT( 
      CLK         : IN     std_logic;
      DM_RESP_H   : IN     std_logic;
      EX_C_Out    : IN     lc3b_word;
      ID_C_Out    : IN     lc3b_word;
      Mem_C_Out   : IN     lc3b_word;
      RESET_L     : IN     std_logic;
      dMiss       : IN     std_logic;
      iMiss       : IN     std_logic;
      im_resp_h   : IN     std_logic;
      instOut     : IN     lc3b_word;
      kill_mread  : IN     std_logic;
      EX_C_In     : OUT    lc3b_word;
      ID_C_In     : OUT    lc3b_word;
      IF_C_In     : OUT    lc3b_word;
      Mem_C_In    : OUT    lc3b_word;
      WB_C_In     : OUT    lc3b_word;
      dm_read_l   : OUT    STD_LOGIC;
      dm_writeh_l : OUT    STD_LOGIC;
      dm_writel_l : OUT    STD_LOGIC;
      im_read_l   : OUT    std_logic;
      im_writeh_l : OUT    std_logic;
      im_writel_l : OUT    std_logic;
      kill        : OUT    std_logic;
      stall       : OUT    std_logic
   );

-- Declarations

END CU ;

--
-- VHDL Architecture ece411.CU.struct
--
-- Created:
--          by - bhatia9.UNKNOWN (gelib-057-01.ews.illinois.edu)
--          at - 03:20:31 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF CU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL JMP               : std_logic;
   SIGNAL JSR               : std_logic;
   SIGNAL beforedm_writeh_l : std_logic;
   SIGNAL beforedm_writel_l : std_logic;
   SIGNAL ex_c              : lc3b_word;
   SIGNAL forwardA          : std_logic_vector(1 DOWNTO 0);
   SIGNAL forwardB          : std_logic_vector(1 DOWNTO 0);
   SIGNAL is_byte           : std_logic;
   SIGNAL is_ldisti         : STD_LOGIC;
   SIGNAL is_odd            : std_logic;
   SIGNAL mem_c             : lc3b_word;
   SIGNAL mem_c2            : lc3b_word;
   SIGNAL preMem_C_In       : lc3b_word;
   SIGNAL preMem_C_In2      : lc3b_word;
   SIGNAL preWB_C_in        : lc3b_word;
   SIGNAL predm_read2_l     : std_logic;
   SIGNAL predm_read_l      : std_logic;
   SIGNAL predm_write2h_l   : std_logic;
   SIGNAL predm_write2l_l   : std_logic;
   SIGNAL predm_writeh_l    : std_logic;
   SIGNAL predm_writel_l    : std_logic;
   SIGNAL storeSel          : std_logic_vector(1 DOWNTO 0);
   SIGNAL wb_c              : lc3b_word;

   -- Implicit buffer signal declarations
   SIGNAL EX_C_In_internal   : lc3b_word;
   SIGNAL Mem_C_In_internal  : lc3b_word;
   SIGNAL im_read_l_internal : std_logic;
   SIGNAL stall_internal     : std_logic;
   SIGNAL kill_internal      : std_logic;


   -- Component Declarations
   COMPONENT EX_C_REG
   PORT (
      CLK     : IN     std_logic ;
      RESET_L : IN     std_logic ;
      ex_c    : IN     lc3b_word ;
      stall   : IN     std_logic ;
      EX_C_In : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT EX_C_UNIT
   PORT (
      forwardA : IN     std_logic_vector (1 DOWNTO 0);
      forwardB : IN     std_logic_vector (1 DOWNTO 0);
      instOut  : IN     lc3b_word ;
      storeSel : IN     std_logic_vector (1 DOWNTO 0);
      ex_c     : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ForwardingUnit
   PORT (
      EX_C_In  : IN     lc3b_word ;
      ID_C_Out : IN     lc3b_word ;
      Mem_C_In : IN     lc3b_word ;
      forwardA : OUT    std_logic_vector (1 DOWNTO 0);
      forwardB : OUT    std_logic_vector (1 DOWNTO 0);
      storeSel : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ID_C_UNIT
   PORT (
      instOut : IN     lc3b_word ;
      ID_C_In : OUT    lc3b_word ;
      JMP     : OUT    std_logic ;
      JSR     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT IF_C_UNIT
   PORT (
      CLK       : IN     std_logic ;
      JMP       : IN     std_logic ;
      JSR       : IN     std_logic ;
      Mem_C_Out : IN     lc3b_word ;
      RESET_L   : IN     std_logic ;
      im_resp_h : IN     std_logic ;
      kill      : IN     std_logic ;
      stall     : IN     std_logic ;
      IF_C_In   : OUT    lc3b_word ;
      im_read_l : INOUT  std_logic 
   );
   END COMPONENT;
   COMPONENT MEM_C_REG
   PORT (
      CLK            : IN     std_logic ;
      RESET_L        : IN     std_logic ;
      mem_c          : IN     lc3b_word ;
      stall          : IN     std_logic ;
      preMem_C_In    : OUT    lc3b_word ;
      predm_read_l   : OUT    std_logic ;
      predm_writeh_l : OUT    std_logic ;
      predm_writel_l : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MEM_C_REG2
   PORT (
      CLK             : IN     std_logic ;
      RESET_L         : IN     std_logic ;
      mem_c2          : IN     lc3b_word ;
      preMem_C_In2    : OUT    lc3b_word ;
      predm_read2_l   : OUT    std_logic ;
      predm_write2h_l : OUT    std_logic ;
      predm_write2l_l : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MEM_C_UNIT
   PORT (
      instOut : IN     lc3b_word ;
      mem_c   : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT MEM_C_UNIT2
   PORT (
      instOut : IN     lc3b_word ;
      mem_c2  : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT Staller
   PORT (
      DM_RESP_H : IN     std_logic ;
      RESET_L   : IN     std_logic ;
      dMiss     : IN     std_logic ;
      stall     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Stripper
   PORT (
      Mem_C_In  : IN     lc3b_word ;
      Mem_C_Out : IN     lc3b_word ;
      is_byte   : OUT    std_logic ;
      is_odd    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WB_C_REG
   PORT (
      CLK        : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      preWB_C_in : IN     lc3b_word ;
      stall      : IN     std_logic ;
      WB_C_In    : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT WB_C_UNIT
   PORT (
      instOut : IN     lc3b_word ;
      wb_c    : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT bubbler
   PORT (
      ID_C_Out : IN     lc3b_word ;
      kill     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT delayUNIT
   PORT (
      CLK        : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      stall      : IN     std_logic ;
      wb_c       : IN     lc3b_word ;
      preWB_C_in : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT parseMemCIn2
   PORT (
      preMem_C_In2 : IN     lc3b_word ;
      is_ldisti    : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT setdmwrites
   PORT (
      is_byte           : IN     std_logic ;
      is_odd            : IN     std_logic ;
      predm_writeh_l    : IN     std_logic ;
      predm_writel_l    : IN     std_logic ;
      beforedm_writeh_l : OUT    std_logic ;
      beforedm_writel_l : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT writeHigh
   PORT (
      im_writeh_l : OUT    std_logic ;
      im_writel_l : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_16
   PORT (
      A   : IN     LC3B_WORD ;
      B   : IN     LC3B_WORD ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    LC3B_WORD 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : EX_C_REG USE ENTITY ece411.EX_C_REG;
   FOR ALL : EX_C_UNIT USE ENTITY ece411.EX_C_UNIT;
   FOR ALL : ForwardingUnit USE ENTITY ece411.ForwardingUnit;
   FOR ALL : ID_C_UNIT USE ENTITY ece411.ID_C_UNIT;
   FOR ALL : IF_C_UNIT USE ENTITY ece411.IF_C_UNIT;
   FOR ALL : MEM_C_REG USE ENTITY ece411.MEM_C_REG;
   FOR ALL : MEM_C_REG2 USE ENTITY ece411.MEM_C_REG2;
   FOR ALL : MEM_C_UNIT USE ENTITY ece411.MEM_C_UNIT;
   FOR ALL : MEM_C_UNIT2 USE ENTITY ece411.MEM_C_UNIT2;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : MUX2_16 USE ENTITY mp3lib.MUX2_16;
   FOR ALL : Staller USE ENTITY ece411.Staller;
   FOR ALL : Stripper USE ENTITY ece411.Stripper;
   FOR ALL : WB_C_REG USE ENTITY ece411.WB_C_REG;
   FOR ALL : WB_C_UNIT USE ENTITY ece411.WB_C_UNIT;
   FOR ALL : bubbler USE ENTITY ece411.bubbler;
   FOR ALL : delayUNIT USE ENTITY ece411.delayUNIT;
   FOR ALL : parseMemCIn2 USE ENTITY ece411.parseMemCIn2;
   FOR ALL : setdmwrites USE ENTITY ece411.setdmwrites;
   FOR ALL : writeHigh USE ENTITY ece411.writeHigh;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   EX_creg : EX_C_REG
      PORT MAP (
         CLK     => CLK,
         RESET_L => RESET_L,
         ex_c    => ex_c,
         stall   => stall_internal,
         EX_C_In => EX_C_In_internal
      );
   EX_GUNIT : EX_C_UNIT
      PORT MAP (
         forwardA => forwardA,
         forwardB => forwardB,
         instOut  => instOut,
         storeSel => storeSel,
         ex_c     => ex_c
      );
   Forwardinator : ForwardingUnit
      PORT MAP (
         EX_C_In  => EX_C_In_internal,
         ID_C_Out => ID_C_Out,
         Mem_C_In => Mem_C_In_internal,
         forwardA => forwardA,
         forwardB => forwardB,
         storeSel => storeSel
      );
   ID_GUNIT : ID_C_UNIT
      PORT MAP (
         instOut => instOut,
         ID_C_In => ID_C_In,
         JMP     => JMP,
         JSR     => JSR
      );
   IF_GUNIT : IF_C_UNIT
      PORT MAP (
         CLK       => CLK,
         JMP       => JMP,
         JSR       => JSR,
         Mem_C_Out => Mem_C_Out,
         RESET_L   => RESET_L,
         im_resp_h => im_resp_h,
         kill      => kill_internal,
         stall     => stall_internal,
         IF_C_In   => IF_C_In,
         im_read_l => im_read_l_internal
      );
   MEM_creg : MEM_C_REG
      PORT MAP (
         CLK            => CLK,
         RESET_L        => RESET_L,
         mem_c          => mem_c,
         stall          => stall_internal,
         preMem_C_In    => preMem_C_In,
         predm_read_l   => predm_read_l,
         predm_writeh_l => predm_writeh_l,
         predm_writel_l => predm_writel_l
      );
   MEM_creg2 : MEM_C_REG2
      PORT MAP (
         CLK             => CLK,
         RESET_L         => RESET_L,
         mem_c2          => mem_c2,
         preMem_C_In2    => preMem_C_In2,
         predm_read2_l   => predm_read2_l,
         predm_write2h_l => predm_write2h_l,
         predm_write2l_l => predm_write2l_l
      );
   MEM_GUNIT : MEM_C_UNIT
      PORT MAP (
         instOut => instOut,
         mem_c   => mem_c
      );
   MEM_GUNIT2 : MEM_C_UNIT2
      PORT MAP (
         instOut => instOut,
         mem_c2  => mem_c2
      );
   baller : Staller
      PORT MAP (
         DM_RESP_H => DM_RESP_H,
         RESET_L   => RESET_L,
         dMiss     => dMiss,
         stall     => stall_internal
      );
   Stripperer : Stripper
      PORT MAP (
         Mem_C_In  => Mem_C_In_internal,
         Mem_C_Out => Mem_C_Out,
         is_byte   => is_byte,
         is_odd    => is_odd
      );
   WB_creg : WB_C_REG
      PORT MAP (
         CLK        => CLK,
         RESET_L    => RESET_L,
         preWB_C_in => preWB_C_in,
         stall      => stall_internal,
         WB_C_In    => WB_C_In
      );
   WB_GUNIT : WB_C_UNIT
      PORT MAP (
         instOut => instOut,
         wb_c    => wb_c
      );
   licensetokill : bubbler
      PORT MAP (
         ID_C_Out => ID_C_Out,
         kill     => kill_internal
      );
   U_1 : delayUNIT
      PORT MAP (
         CLK        => CLK,
         RESET_L    => RESET_L,
         stall      => stall_internal,
         wb_c       => wb_c,
         preWB_C_in => preWB_C_in
      );
   parseMemCWord : parseMemCIn2
      PORT MAP (
         preMem_C_In2 => preMem_C_In2,
         is_ldisti    => is_ldisti
      );
   dmwriteinator : setdmwrites
      PORT MAP (
         is_byte           => is_byte,
         is_odd            => is_odd,
         predm_writeh_l    => predm_writeh_l,
         predm_writel_l    => predm_writel_l,
         beforedm_writeh_l => beforedm_writeh_l,
         beforedm_writel_l => beforedm_writel_l
      );
   imwriter : writeHigh
      PORT MAP (
         im_writeh_l => im_writeh_l,
         im_writel_l => im_writel_l
      );
   readlsel : MUX2_1
      PORT MAP (
         A   => predm_read_l,
         B   => predm_read2_l,
         SEL => is_ldisti,
         F   => dm_read_l
      );
   writehsel : MUX2_1
      PORT MAP (
         A   => beforedm_writeh_l,
         B   => predm_write2h_l,
         SEL => is_ldisti,
         F   => dm_writeh_l
      );
   writelsel : MUX2_1
      PORT MAP (
         A   => beforedm_writel_l,
         B   => predm_write2l_l,
         SEL => is_ldisti,
         F   => dm_writel_l
      );
   Mem_C_sel : MUX2_16
      PORT MAP (
         A   => preMem_C_In,
         B   => preMem_C_In2,
         SEL => is_ldisti,
         F   => Mem_C_In_internal
      );

   -- Implicit buffered output assignments
   EX_C_In   <= EX_C_In_internal;
   Mem_C_In  <= Mem_C_In_internal;
   im_read_l <= im_read_l_internal;
   stall     <= stall_internal;
   kill      <= kill_internal;

END struct;
