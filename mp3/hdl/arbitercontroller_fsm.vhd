-- VHDL Entity ece411.ArbiterController.symbol
--
-- Created:
--          by - martin43.UNKNOWN (evrt-252-30.ews.illinois.edu)
--          at - 20:04:29 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ArbiterController IS
   PORT( 
      clk           : IN     std_logic;
      dpmread_l     : IN     std_logic;
      dpmwrite_l    : IN     std_logic;
      ipmread_l     : IN     std_logic;
      ipmwrite_l    : IN     std_logic;
      mresp_h       : IN     std_logic;
      reset_l       : IN     std_logic;
      addrMuxSel    : OUT    std_logic;
      dataOutMuxSel : OUT    std_logic;
      dpmrespSel    : OUT    std_logic;
      ipmrespSel    : OUT    std_logic;
      mread_l       : OUT    std_logic;
      mwrite_l      : OUT    std_logic
   );

-- Declarations

END ArbiterController ;

--
-- VHDL Architecture ece411.ArbiterController.fsm
--
-- Created:
--          by - martin43.UNKNOWN (evrt-252-30.ews.illinois.edu)
--          at - 20:04:29 12/05/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF ArbiterController IS

   TYPE STATE_TYPE IS (
      idle,
      dread,
      iread,
      dwrite,
      iwrite
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      reset_l
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset_l = '0') THEN
         current_state <= idle;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      dpmread_l,
      dpmwrite_l,
      ipmread_l,
      ipmwrite_l,
      mresp_h
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN idle => 
            IF (dpmread_l = '0') THEN 
               next_state <= dread;
            ELSIF (ipmread_l = '0') THEN 
               next_state <= iread;
            ELSIF (dpmwrite_l = '0') THEN 
               next_state <= dwrite;
            ELSIF (ipmwrite_l = '0') THEN 
               next_state <= iwrite;
            ELSE
               next_state <= idle;
            END IF;
         WHEN dread => 
            IF (mresp_h = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= dread;
            END IF;
         WHEN iread => 
            IF (mresp_h = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= iread;
            END IF;
         WHEN dwrite => 
            IF (mresp_h = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= dwrite;
            END IF;
         WHEN iwrite => 
            IF (mresp_h = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= iwrite;
            END IF;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      addrMuxSel <= '0';
      dataOutMuxSel <= '0';
      dpmrespSel <= '0';
      ipmrespSel <= '0';
      mread_l <= '1';
      mwrite_l <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN dread => 
            mread_l <= '0' after 6ns;
            dataOutMuxSel <= '0';
            addrMuxSel <= '0';
            dpmrespSel <= '1';
         WHEN iread => 
            mread_l <= '0' after 6ns;
            dataOutMuxSel <= '1';
            addrMuxSel <= '1';
            ipmrespSel <= '1';
         WHEN dwrite => 
            mwrite_l <= '0' after 6ns;
            dataOutMuxSel <= '0';
            addrMuxSel <= '0';
            dpmrespSel <= '1';
         WHEN iwrite => 
            mwrite_l <= '0' after 6ns;
            dataOutMuxSel <= '1';
            addrMuxSel <= '1';
            ipmrespSel <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
