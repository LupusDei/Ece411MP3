-- VHDL Entity ece411.IDStage.interface
--
-- Created:
--          by - bhatia9.UNKNOWN (gelib-057-21.ews.illinois.edu)
--          at - 01:06:03 11/16/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY IDStage IS
   PORT( 
      ID_C_In    : IN     lc3b_word;
      OutA       : IN     lc3b_word;
      OutB       : IN     lc3b_word;
      instIn     : IN     lc3b_word;
      nextPCin   : IN     lc3b_word;
      ALUInA     : OUT    lc3b_word;
      ALUInB     : OUT    lc3b_word;
      ID_C_Out   : OUT    lc3b_word;
      RA         : OUT    lc3b_reg;
      RB         : OUT    lc3b_reg;
      SrcRegData : OUT    lc3b_word;
      instOut    : OUT    lc3b_word;
      newPC      : OUT    lc3b_word
   );

-- Declarations

END IDStage ;

--
-- VHDL Architecture ece411.IDStage.struct
--
-- Created:
--          by - bhatia9.UNKNOWN (gelib-057-21.ews.illinois.edu)
--          at - 01:06:03 11/16/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF IDStage IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUMuxSel   : LC3b_8MUX_SEL;
   SIGNAL B           : LC3B_WORD;
   SIGNAL Imm5        : LC3b_word;
   SIGNAL Instr11     : lc3b_offset11;
   SIGNAL Instr5      : lc3b_imm5;
   SIGNAL Instr6      : lc3b_index6;
   SIGNAL Instr9      : lc3b_offset9;
   SIGNAL Offset6     : LC3b_word;
   SIGNAL PCOffset11  : LC3b_word;
   SIGNAL PCOffset9   : LC3b_word;
   SIGNAL RegBMuxSel  : STD_LOGIC;
   SIGNAL off6shifted : LC3b_word;
   SIGNAL regBSel     : lc3b_reg;
   SIGNAL srcRegSel   : lc3b_reg;


   -- Component Declarations
   COMPONENT CreateSrcReg
   PORT (
      instIn   : IN     lc3b_word ;
      ID_C_Out : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ID_C_Decode
   PORT (
      ID_C_In    : IN     lc3b_word ;
      ALUMuxSel  : OUT    LC3b_8MUX_SEL ;
      RegBMuxSel : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT InstrRipper
   PORT (
      instIn  : IN     lc3b_word ;
      Instr11 : OUT    lc3b_offset11 ;
      Instr5  : OUT    lc3b_imm5 ;
      Instr6  : OUT    lc3b_index6 ;
      Instr9  : OUT    lc3b_offset9 
   );
   END COMPONENT;
   COMPONENT SEXT
   PORT (
      Instr11    : IN     lc3b_offset11 ;
      Instr5     : IN     lc3b_imm5 ;
      Instr6     : IN     lc3b_index6 ;
      Instr9     : IN     lc3b_offset9 ;
      Imm5       : OUT    LC3b_word ;
      Offset6    : OUT    LC3b_word ;
      PCOffset11 : OUT    LC3b_word ;
      PCOffset9  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      E   : IN     LC3b_word ;
      F   : IN     LC3b_word ;
      G   : IN     LC3b_word ;
      H   : IN     LC3b_word ;
      Sel : IN     LC3b_8MUX_SEL ;
      O   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Worthless
   PORT (
      In0  : IN     LC3b_word ;
      Out0 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT regExtractor
   PORT (
      instIn    : IN     lc3b_word ;
      RA        : OUT    lc3b_reg ;
      regBSel   : OUT    lc3b_reg ;
      srcRegSel : OUT    lc3b_reg 
   );
   END COMPONENT;
   COMPONENT shift
   PORT (
      Offset6     : IN     LC3b_word ;
      off6shifted : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADD16
   PORT (
      A : IN     LC3B_WORD ;
      B : IN     LC3B_WORD ;
      F : OUT    LC3B_WORD 
   );
   END COMPONENT;
   COMPONENT MUX2_3
   PORT (
      A   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADD16 USE ENTITY mp3lib.ADD16;
   FOR ALL : CreateSrcReg USE ENTITY ece411.CreateSrcReg;
   FOR ALL : ID_C_Decode USE ENTITY ece411.ID_C_Decode;
   FOR ALL : InstrRipper USE ENTITY ece411.InstrRipper;
   FOR ALL : MUX2_3 USE ENTITY mp3lib.MUX2_3;
   FOR ALL : SEXT USE ENTITY ece411.SEXT;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : Worthless USE ENTITY ece411.Worthless;
   FOR ALL : regExtractor USE ENTITY ece411.regExtractor;
   FOR ALL : shift USE ENTITY ece411.shift;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   Ripperer : CreateSrcReg
      PORT MAP (
         instIn   => instIn,
         ID_C_Out => ID_C_Out
      );
   Decodinator : ID_C_Decode
      PORT MAP (
         ID_C_In    => ID_C_In,
         ALUMuxSel  => ALUMuxSel,
         RegBMuxSel => RegBMuxSel
      );
   ripsauce : InstrRipper
      PORT MAP (
         instIn  => instIn,
         Instr11 => Instr11,
         Instr5  => Instr5,
         Instr6  => Instr6,
         Instr9  => Instr9
      );
   SEXTinator : SEXT
      PORT MAP (
         Instr11    => Instr11,
         Instr5     => Instr5,
         Instr6     => Instr6,
         Instr9     => Instr9,
         Imm5       => Imm5,
         Offset6    => Offset6,
         PCOffset11 => PCOffset11,
         PCOffset9  => PCOffset9
      );
   ALUMux : WordMux8
      PORT MAP (
         A   => OutB,
         B   => nextPCin,
         C   => Imm5,
         D   => PCOffset9,
         E   => PCOffset11,
         F   => Offset6,
         G   => off6shifted,
         H   => Offset6,
         Sel => ALUMuxSel,
         O   => ALUInB
      );
   RAGE : Worthless
      PORT MAP (
         In0  => OutB,
         Out0 => SrcRegData
      );
   terriBAD : Worthless
      PORT MAP (
         In0  => OutA,
         Out0 => ALUInA
      );
   terriBAD1 : Worthless
      PORT MAP (
         In0  => instIn,
         Out0 => instOut
      );
   Extractinator : regExtractor
      PORT MAP (
         instIn    => instIn,
         RA        => RA,
         regBSel   => regBSel,
         srcRegSel => srcRegSel
      );
   brshift : shift
      PORT MAP (
         Offset6     => PCOffset9,
         off6shifted => B
      );
   off6shift : shift
      PORT MAP (
         Offset6     => Offset6,
         off6shifted => off6shifted
      );
   Adder : ADD16
      PORT MAP (
         A => nextPCin,
         B => B,
         F => newPC
      );
   RegBMux : MUX2_3
      PORT MAP (
         A   => regBSel,
         B   => srcRegSel,
         SEL => RegBMuxSel,
         F   => RB
      );

END struct;
