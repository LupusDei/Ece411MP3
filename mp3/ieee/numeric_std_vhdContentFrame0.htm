<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title>numeric_std.vhd</title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 00:57:48 on 09/15/11 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- --------------------------------------------------------------------</span>
<span class=C>--</span>
<span class=C>-- Copyright 1995 by IEEE. All rights reserved.</span>
<span class=C>--</span>
<span class=C>-- This source file is considered by the IEEE to be an essential part of the use</span>
<span class=C>-- of the standard 1076.3 and as such may be distributed without change, except</span>
<span class=C>-- as permitted by the standard. This source file may not be sold or distributed</span>
<span class=C>-- for profit. This package may be modified to include additional data required</span>
<span class=C>-- by tools, but must in no way change the external interfaces or simulation</span>
<span class=C>-- behaviour of the description. It is permissible to add comments and&#47;or</span>
<span class=C>-- attributes to the package declarations, but not to change or delete any</span>
<span class=C>-- original lines of the approved package declaration. The package body may be</span>
<span class=C>-- changed only in accordance with the terms of clauses 7.1 and 7.2 of the</span>
<span class=C>-- standard.</span>
<span class=C>--</span>
<span class=C>-- Title      : Standard VHDL Synthesis Package (1076.3, NUMERIC_STD)</span>
<span class=C>--</span>
<span class=C>-- Library    : This package shall be compiled into a library symbolically</span>
<span class=C>--            : named IEEE.</span>
<span class=C>--</span>
<span class=C>-- Developers : IEEE DASC Synthesis Working Group, PAR 1076.3</span>
<span class=C>--</span>
<span class=C>-- Purpose    : This package defines numeric types and arithmetic functions</span>
<span class=C>--            : for use with synthesis tools. Two numeric types are defined:</span>
<span class=C>--            : -- &gt; UNSIGNED: represents UNSIGNED number in vector form</span>
<span class=C>--            : -- &gt; SIGNED: represents a SIGNED number in vector form</span>
<span class=C>--            : The base element type is type STD_LOGIC.</span>
<span class=C>--            : The leftmost bit is treated as the most significant bit.</span>
<span class=C>--            : Signed vectors are represented in two's complement form.</span>
<span class=C>--            : This package contains overloaded arithmetic operators on</span>
<span class=C>--            : the SIGNED and UNSIGNED types. The package also contains</span>
<span class=C>--            : useful type conversions functions.</span>
<span class=C>--            :</span>
<span class=C>--            : If any argument to a function is a null array, a null array is</span>
<span class=C>--            : returned (exceptions, if any, are noted individually).</span>
<span class=C>--</span>
<span class=C>-- Limitation :</span>
<span class=C>--</span>
<span class=C>-- Note       : No declarations or definitions shall be included in,</span>
<span class=C>--            : or excluded from this package. The &quot;package declaration&quot;</span>
<span class=C>--            : defines the types, subtypes and declarations of</span>
<span class=C>--            : NUMERIC_STD. The NUMERIC_STD package body shall be</span>
<span class=C>--            : considered the formal definition of the semantics of</span>
<span class=C>--            : this package. Tool developers may choose to implement</span>
<span class=C>--            : the package body in the most efficient manner available</span>
<span class=C>--            : to them.</span>
<span class=C>--</span>
<span class=C>-- --------------------------------------------------------------------</span>
<span class=C>--   modification history :</span>
<span class=C>-- --------------------------------------------------------------------</span>
<span class=C>--   Version:  2.4</span>
<span class=C>--   Date   :  12 April 1995</span>
<span class=C>-- -----------------------------------------------------------------------------</span>
<span class=K>library</span> IEEE;
<span class=K>use</span> IEEE.STD_LOGIC_1164.<span class=K>all</span>;

<span class=K>package</span> NUMERIC_STD <span class=K>is</span>
  <span class=K>constant</span> CopyRightNotice: <span class=T>STRING</span>
      := <span class=S>"Copyright 1995 IEEE. All rights reserved."</span>;

  <span class=K>attribute</span> builtin_subprogram: <span class=T>string</span>;

  <span class=C>--============================================================================</span>
  <span class=C>-- Numeric array type definitions</span>
  <span class=C>--============================================================================</span>

  <span class=K>type</span> UNSIGNED <span class=K>is</span> <span class=K>array</span> (<span class=T>NATURAL</span> <span class=K>range</span> <>) <span class=K>of</span> <span class=T>STD_LOGIC</span>;
  <span class=K>type</span> SIGNED <span class=K>is</span> <span class=K>array</span> (<span class=T>NATURAL</span> <span class=K>range</span> <>) <span class=K>of</span> <span class=T>STD_LOGIC</span>;

  <span class=C>--============================================================================</span>
  <span class=C>-- Arithmetic Operators:</span>
  <span class=C>--===========================================================================</span>

  <span class=C>-- Id: A.1</span>
  <span class=K>function</span> <span class=S>"abs"</span> (ARG: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"ABS"</span>[SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_abs_ss"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Returns the absolute value of a SIGNED vector ARG.</span>

  <span class=C>-- Id: A.2</span>
  <span class=K>function</span> <span class=S>"-"</span> (ARG: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_unary_minus_ss"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Returns the value of the unary minus operation on a</span>
  <span class=C>--         SIGNED vector ARG.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: A.3</span>
  <span class=K>function</span> <span class=S>"+"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(MAX(L'LENGTH, R'LENGTH)-1 downto 0).</span>
  <span class=C>-- Result: Adds two UNSIGNED vectors that may be of different lengths.</span>

  <span class=C>-- Id: A.4</span>
  <span class=K>function</span> <span class=S>"+"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_sss"</span>;
  <span class=C>-- Result subtype: SIGNED(MAX(L'LENGTH, R'LENGTH)-1 downto 0).</span>
  <span class=C>-- Result: Adds two SIGNED vectors that may be of different lengths.</span>

  <span class=C>-- Id: A.5</span>
  <span class=K>function</span> <span class=S>"+"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Adds an UNSIGNED vector, L, with a non-negative INTEGER, R.</span>

  <span class=C>-- Id: A.6</span>
  <span class=K>function</span> <span class=S>"+"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Adds a non-negative INTEGER, L, with an UNSIGNED vector, R.</span>

  <span class=C>-- Id: A.7</span>
  <span class=K>function</span> <span class=S>"+"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_iss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Adds an INTEGER, L(may be positive or negative), to a SIGNED</span>
  <span class=C>--         vector, R.</span>

  <span class=C>-- Id: A.8</span>
  <span class=K>function</span> <span class=S>"+"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"+"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_plus_sis"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Adds a SIGNED vector, L, to an INTEGER, R.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: A.9</span>
  <span class=K>function</span> <span class=S>"-"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(MAX(L'LENGTH, R'LENGTH)-1 downto 0).</span>
  <span class=C>-- Result: Subtracts two UNSIGNED vectors that may be of different lengths.</span>

  <span class=C>-- Id: A.10</span>
  <span class=K>function</span> <span class=S>"-"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_sss"</span>;
  <span class=C>-- Result subtype: SIGNED(MAX(L'LENGTH, R'LENGTH)-1 downto 0).</span>
  <span class=C>-- Result: Subtracts a SIGNED vector, R, from another SIGNED vector, L,</span>
  <span class=C>--         that may possibly be of different lengths.</span>

  <span class=C>-- Id: A.11</span>
  <span class=K>function</span> <span class=S>"-"</span> (L: UNSIGNED;R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Subtracts a non-negative INTEGER, R, from an UNSIGNED vector, L.</span>

  <span class=C>-- Id: A.12</span>
  <span class=K>function</span> <span class=S>"-"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Subtracts an UNSIGNED vector, R, from a non-negative INTEGER, L.</span>

  <span class=C>-- Id: A.13</span>
  <span class=K>function</span> <span class=S>"-"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_sis"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Subtracts an INTEGER, R, from a SIGNED vector, L.</span>

  <span class=C>-- Id: A.14</span>
  <span class=K>function</span> <span class=S>"-"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"-"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_minus_iss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0).</span>
  <span class=C>-- Result: Subtracts a SIGNED vector, R, from an INTEGER, L.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: A.15</span>
  <span class=K>function</span> <span class=S>"*"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED((L'LENGTH+R'LENGTH-1) downto 0).</span>
  <span class=C>-- Result: Performs the multiplication operation on two UNSIGNED vectors</span>
  <span class=C>--         that may possibly be of different lengths.</span>

  <span class=C>-- Id: A.16</span>
  <span class=K>function</span> <span class=S>"*"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_sss"</span>;
  <span class=C>-- Result subtype: SIGNED((L'LENGTH+R'LENGTH-1) downto 0)</span>
  <span class=C>-- Result: Multiplies two SIGNED vectors that may possibly be of</span>
  <span class=C>--         different lengths.</span>

  <span class=C>-- Id: A.17</span>
  <span class=K>function</span> <span class=S>"*"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED((L'LENGTH+L'LENGTH-1) downto 0).</span>
  <span class=C>-- Result: Multiplies an UNSIGNED vector, L, with a non-negative</span>
  <span class=C>--         INTEGER, R. R is converted to an UNSIGNED vector of</span>
  <span class=C>--         SIZE L'LENGTH before multiplication.</span>

  <span class=C>-- Id: A.18</span>
  <span class=K>function</span> <span class=S>"*"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED((R'LENGTH+R'LENGTH-1) downto 0).</span>
  <span class=C>-- Result: Multiplies an UNSIGNED vector, R, with a non-negative</span>
  <span class=C>--         INTEGER, L. L is converted to an UNSIGNED vector of</span>
  <span class=C>--         SIZE R'LENGTH before multiplication.</span>

  <span class=C>-- Id: A.19</span>
  <span class=K>function</span> <span class=S>"*"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_sis"</span>;
  <span class=C>-- Result subtype: SIGNED((L'LENGTH+L'LENGTH-1) downto 0)</span>
  <span class=C>-- Result: Multiplies a SIGNED vector, L, with an INTEGER, R. R is</span>
  <span class=C>--         converted to a SIGNED vector of SIZE L'LENGTH before</span>
  <span class=C>--         multiplication.</span>

  <span class=C>-- Id: A.20</span>
  <span class=K>function</span> <span class=S>"*"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"*"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mult_iss"</span>;
  <span class=C>-- Result subtype: SIGNED((R'LENGTH+R'LENGTH-1) downto 0)</span>
  <span class=C>-- Result: Multiplies a SIGNED vector, R, with an INTEGER, L. L is</span>
  <span class=C>--         converted to a SIGNED vector of SIZE R'LENGTH before</span>
  <span class=C>--         multiplication.</span>

  <span class=C>--============================================================================</span>
  <span class=C>--</span>
  <span class=C>-- NOTE: If second argument is zero for &quot;&#47;&quot; operator, a severity level</span>
  <span class=C>--       of ERROR is issued.</span>

  <span class=C>-- Id: A.21</span>
  <span class=K>function</span> <span class=S>"/"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides an UNSIGNED vector, L, by another UNSIGNED vector, R.</span>

  <span class=C>-- Id: A.22</span>
  <span class=K>function</span> <span class=S>"/"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_sss"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides an SIGNED vector, L, by another SIGNED vector, R.</span>

  <span class=C>-- Id: A.23</span>
  <span class=K>function</span> <span class=S>"/"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides an UNSIGNED vector, L, by a non-negative INTEGER, R.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.24</span>
  <span class=K>function</span> <span class=S>"/"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides a non-negative INTEGER, L, by an UNSIGNED vector, R.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>-- Id: A.25</span>
  <span class=K>function</span> <span class=S>"/"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_sis"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides a SIGNED vector, L, by an INTEGER, R.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.26</span>
  <span class=K>function</span> <span class=S>"/"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_div_iss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Divides an INTEGER, L, by a SIGNED vector, R.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>--============================================================================</span>
  <span class=C>--</span>
  <span class=C>-- NOTE: If second argument is zero for &quot;rem&quot; operator, a severity level</span>
  <span class=C>--       of ERROR is issued.</span>

  <span class=C>-- Id: A.27</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where L and R are UNSIGNED vectors.</span>

  <span class=C>-- Id: A.28</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_sss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where L and R are SIGNED vectors.</span>

  <span class=C>-- Id: A.29</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where L is an UNSIGNED vector and R is a</span>
  <span class=C>--         non-negative INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.30</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where R is an UNSIGNED vector and L is a</span>
  <span class=C>--         non-negative INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>-- Id: A.31</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_sis"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where L is SIGNED vector and R is an INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.32</span>
  <span class=K>function</span> <span class=S>"rem"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"REM"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_rem_iss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L rem R&quot; where R is SIGNED vector and L is an INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>--============================================================================</span>
  <span class=C>--</span>
  <span class=C>-- NOTE: If second argument is zero for &quot;mod&quot; operator, a severity level</span>
  <span class=C>--       of ERROR is issued.</span>

  <span class=C>-- Id: A.33</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_uuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where L and R are UNSIGNED vectors.</span>

  <span class=C>-- Id: A.34</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_sss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where L and R are SIGNED vectors.</span>

  <span class=C>-- Id: A.35</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where L is an UNSIGNED vector and R</span>
  <span class=C>--         is a non-negative INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.36</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_nuu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where R is an UNSIGNED vector and L</span>
  <span class=C>--         is a non-negative INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>-- Id: A.37</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_sis"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>
  <span class=C>--         If NO_OF_BITS(R) &gt; L'LENGTH, result is truncated to L'LENGTH.</span>

  <span class=C>-- Id: A.38</span>
  <span class=K>function</span> <span class=S>"mod"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"MOD"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_mod_iss"</span>;
  <span class=C>-- Result subtype: SIGNED(R'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Computes &quot;L mod R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>
  <span class=C>--         If NO_OF_BITS(L) &gt; R'LENGTH, result is truncated to R'LENGTH.</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Comparison Operators</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.1</span>
  <span class=K>function</span> <span class=S>">"</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.2</span>
  <span class=K>function</span> <span class=S>">"</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.3</span>
  <span class=K>function</span> <span class=S>">"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.4</span>
  <span class=K>function</span> <span class=S>">"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L is a INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.5</span>
  <span class=K>function</span> <span class=S>">"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.6</span>
  <span class=K>function</span> <span class=S>">"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gt_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt; R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is a INTEGER.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.7</span>
  <span class=K>function</span> <span class=S>"<"</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.8</span>
  <span class=K>function</span> <span class=S>"<"</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.9</span>
  <span class=K>function</span> <span class=S>"<"</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.10</span>
  <span class=K>function</span> <span class=S>"<"</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.11</span>
  <span class=K>function</span> <span class=S>"<"</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.12</span>
  <span class=K>function</span> <span class=S>"<"</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lt_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt; R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.13</span>
  <span class=K>function</span> <span class=S>"<="</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.14</span>
  <span class=K>function</span> <span class=S>"<="</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.15</span>
  <span class=K>function</span> <span class=S>"<="</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.16</span>
  <span class=K>function</span> <span class=S>"<="</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.17</span>
  <span class=K>function</span> <span class=S>"<="</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.18</span>
  <span class=K>function</span> <span class=S>"<="</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"<="</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_lte_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &lt;= R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.19</span>
  <span class=K>function</span> <span class=S>">="</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.20</span>
  <span class=K>function</span> <span class=S>">="</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.21</span>
  <span class=K>function</span> <span class=S>">="</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.22</span>
  <span class=K>function</span> <span class=S>">="</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.23</span>
  <span class=K>function</span> <span class=S>">="</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.24</span>
  <span class=K>function</span> <span class=S>">="</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>">="</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_gte_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &gt;= R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.25</span>
  <span class=K>function</span> <span class=S>"="</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.26</span>
  <span class=K>function</span> <span class=S>"="</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.27</span>
  <span class=K>function</span> <span class=S>"="</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.28</span>
  <span class=K>function</span> <span class=S>"="</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.29</span>
  <span class=K>function</span> <span class=S>"="</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.30</span>
  <span class=K>function</span> <span class=S>"="</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"="</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_eq_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L = R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: C.31</span>
  <span class=K>function</span> <span class=S>"/="</span> (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_uu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L and R are UNSIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.32</span>
  <span class=K>function</span> <span class=S>"/="</span> (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_ss"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L and R are SIGNED vectors possibly</span>
  <span class=C>--         of different lengths.</span>

  <span class=C>-- Id: C.33</span>
  <span class=K>function</span> <span class=S>"/="</span> (L: <span class=T>NATURAL</span>; R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[<span class=T>NATURAL</span>, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_nu"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L is a non-negative INTEGER and</span>
  <span class=C>--         R is an UNSIGNED vector.</span>

  <span class=C>-- Id: C.34</span>
  <span class=K>function</span> <span class=S>"/="</span> (L: <span class=T>INTEGER</span>; R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[<span class=T>INTEGER</span>, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_is"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L is an INTEGER and</span>
  <span class=C>--         R is a SIGNED vector.</span>

  <span class=C>-- Id: C.35</span>
  <span class=K>function</span> <span class=S>"/="</span> (L: UNSIGNED; R: <span class=T>NATURAL</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_un"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L is an UNSIGNED vector and</span>
  <span class=C>--         R is a non-negative INTEGER.</span>

  <span class=C>-- Id: C.36</span>
  <span class=K>function</span> <span class=S>"/="</span> (L: SIGNED; R: <span class=T>INTEGER</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"/="</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_neq_si"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: Computes &quot;L &#47;= R&quot; where L is a SIGNED vector and</span>
  <span class=C>--         R is an INTEGER.</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Shift and Rotate Functions</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: S.1</span>
  <span class=K>function</span> SHIFT_LEFT (ARG: UNSIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        SHIFT_LEFT[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_sll_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a shift-left on an UNSIGNED vector COUNT times.</span>
  <span class=C>--         The vacated positions are filled with '0'.</span>
  <span class=C>--         The COUNT leftmost elements are lost.</span>

  <span class=C>-- Id: S.2</span>
  <span class=K>function</span> SHIFT_RIGHT (ARG: UNSIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        SHIFT_RIGHT[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_srl_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a shift-right on an UNSIGNED vector COUNT times.</span>
  <span class=C>--         The vacated positions are filled with '0'.</span>
  <span class=C>--         The COUNT rightmost elements are lost.</span>

  <span class=C>-- Id: S.3</span>
  <span class=K>function</span> SHIFT_LEFT (ARG: SIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        SHIFT_LEFT[SIGNED, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_sll_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a shift-left on a SIGNED vector COUNT times.</span>
  <span class=C>--         The vacated positions are filled with '0'.</span>
  <span class=C>--         The COUNT leftmost elements are lost.</span>

  <span class=C>-- Id: S.4</span>
  <span class=K>function</span> SHIFT_RIGHT (ARG: SIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        SHIFT_RIGHT[SIGNED, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_sra"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a shift-right on a SIGNED vector COUNT times.</span>
  <span class=C>--         The vacated positions are filled with the leftmost</span>
  <span class=C>--         element, ARG'LEFT. The COUNT rightmost elements are lost.</span>

  <span class=C>--============================================================================</span>

  <span class=C>-- Id: S.5</span>
  <span class=K>function</span> ROTATE_LEFT (ARG: UNSIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        ROTATE_LEFT[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_rol"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a rotate-left of an UNSIGNED vector COUNT times.</span>

  <span class=C>-- Id: S.6</span>
  <span class=K>function</span> ROTATE_RIGHT (ARG: UNSIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        ROTATE_RIGHT[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_ror"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a rotate-right of an UNSIGNED vector COUNT times.</span>

  <span class=C>-- Id: S.7</span>
  <span class=K>function</span> ROTATE_LEFT (ARG: SIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        ROTATE_LEFT[SIGNED, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_rol"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a logical rotate-left of a SIGNED</span>
  <span class=C>--         vector COUNT times.</span>

  <span class=C>-- Id: S.8</span>
  <span class=K>function</span> ROTATE_RIGHT (ARG: SIGNED; COUNT: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        ROTATE_RIGHT[SIGNED, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_ror"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Performs a logical rotate-right of a SIGNED</span>
  <span class=C>--         vector COUNT times.</span>

  <span class=C>--============================================================================</span>

  <span class=C>--============================================================================</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.9 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.9</span>
  <span class=K>function</span> <span class=S>"sll"</span> (ARG: UNSIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"SLL"</span>[UNSIGNED, <span class=T>INTEGER</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_sll_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: SHIFT_LEFT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Note : Function S.10 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.10</span>
  <span class=K>function</span> <span class=S>"sll"</span> (ARG: SIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"SLL"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_sll_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: SHIFT_LEFT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.11 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.11</span>
  <span class=K>function</span> <span class=S>"srl"</span> (ARG: UNSIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"SRL"</span>[UNSIGNED, <span class=T>INTEGER</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_srl_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: SHIFT_RIGHT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.12 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.12</span>
  <span class=K>function</span> <span class=S>"srl"</span> (ARG: SIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"SRL"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_srl_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: SIGNED(SHIFT_RIGHT(UNSIGNED(ARG), COUNT))</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.13 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>-- out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.13</span>
  <span class=K>function</span> <span class=S>"rol"</span> (ARG: UNSIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"ROL"</span>[UNSIGNED, <span class=T>INTEGER</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_rol"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: ROTATE_LEFT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.14 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.14</span>
  <span class=K>function</span> <span class=S>"rol"</span> (ARG: SIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"ROL"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_rol"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: ROTATE_LEFT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Note : Function S.15 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.15</span>
  <span class=K>function</span> <span class=S>"ror"</span> (ARG: UNSIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"ROR"</span>[UNSIGNED, <span class=T>INTEGER</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_ror"</span>;
  <span class=C>-- Result subtype: UNSIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: ROTATE_RIGHT(ARG, COUNT)</span>

  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>--   Note : Function S.16 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>--   out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>------------------------------------------------------------------------------</span>
  <span class=C>-- Id: S.16</span>
  <span class=K>function</span> <span class=S>"ror"</span> (ARG: SIGNED; COUNT: <span class=T>INTEGER</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"ROR"</span>[SIGNED, <span class=T>INTEGER</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_ror"</span>;
  <span class=C>-- Result subtype: SIGNED(ARG'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: ROTATE_RIGHT(ARG, COUNT)</span>

  <span class=C>--============================================================================</span>
  <span class=C>--   RESIZE Functions</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: R.1</span>
  <span class=K>function</span> RESIZE (ARG: SIGNED; NEW_SIZE: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        RESIZE[SIGNED, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_resize_sns"</span>;
  <span class=C>-- Result subtype: SIGNED(NEW_SIZE-1 downto 0)</span>
  <span class=C>-- Result: Resizes the SIGNED vector ARG to the specified size.</span>
  <span class=C>--         To create a larger vector, the new [leftmost] bit positions</span>
  <span class=C>--         are filled with the sign bit (ARG'LEFT). When truncating,</span>
  <span class=C>--         the sign bit is retained along with the rightmost part.</span>

  <span class=C>-- Id: R.2</span>
  <span class=K>function</span> RESIZE (ARG: UNSIGNED; NEW_SIZE: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        RESIZE[UNSIGNED, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_resize_unu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(NEW_SIZE-1 downto 0)</span>
  <span class=C>-- Result: Resizes the SIGNED vector ARG to the specified size.</span>
  <span class=C>--         To create a larger vector, the new [leftmost] bit positions</span>
  <span class=C>--         are filled with '0'. When truncating, the leftmost bits</span>
  <span class=C>--         are dropped.</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Conversion Functions</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: D.1</span>
  <span class=K>function</span> TO_INTEGER (ARG: UNSIGNED) <span class=K>return</span> <span class=T>NATURAL</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_INTEGER[UNSIGNED <span class=K>return</span> <span class=T>NATURAL</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_conv_integer_un2"</span>;
  <span class=C>-- Result subtype: NATURAL. Value cannot be negative since parameter is an</span>
  <span class=C>--             UNSIGNED vector.</span>
  <span class=C>-- Result: Converts the UNSIGNED vector to an INTEGER.</span>

  <span class=C>-- Id: D.2</span>
  <span class=K>function</span> TO_INTEGER (ARG: SIGNED) <span class=K>return</span> <span class=T>INTEGER</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_INTEGER[SIGNED <span class=K>return</span> <span class=T>INTEGER</span>]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_conv_integer_si"</span>;
  <span class=C>-- Result subtype: INTEGER</span>
  <span class=C>-- Result: Converts a SIGNED vector to an INTEGER.</span>

  <span class=C>-- Id: D.3</span>
  <span class=K>function</span> TO_UNSIGNED (ARG, SIZE: <span class=T>NATURAL</span>) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_UNSIGNED [<span class=T>NATURAL</span>, <span class=T>NATURAL</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_conv_unsigned_nu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(SIZE-1 downto 0)</span>
  <span class=C>-- Result: Converts a non-negative INTEGER to an UNSIGNED vector with</span>
  <span class=C>--         the specified SIZE.</span>

  <span class=C>-- Id: D.4</span>
  <span class=K>function</span> TO_SIGNED (ARG: <span class=T>INTEGER</span>; SIZE: <span class=T>NATURAL</span>) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_SIGNED [<span class=T>INTEGER</span>, <span class=T>NATURAL</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_conv_signed_is"</span>;
  <span class=C>-- Result subtype: SIGNED(SIZE-1 downto 0)</span>
  <span class=C>-- Result: Converts an INTEGER to a SIGNED vector of the specified SIZE.</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Logical Operators</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: L.1</span>
  <span class=K>function</span> <span class=S>"not"</span> (L: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NOT"</span>[UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_not_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Termwise inversion</span>

  <span class=C>-- Id: L.2</span>
  <span class=K>function</span> <span class=S>"and"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"AND"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_and_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector AND operation</span>

  <span class=C>-- Id: L.3</span>
  <span class=K>function</span> <span class=S>"or"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"OR"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_or_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector OR operation</span>

  <span class=C>-- Id: L.4</span>
  <span class=K>function</span> <span class=S>"nand"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NAND"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_nand_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector NAND operation</span>

  <span class=C>-- Id: L.5</span>
  <span class=K>function</span> <span class=S>"nor"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NOR"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_nor_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector NOR operation</span>

  <span class=C>-- Id: L.6</span>
  <span class=K>function</span> <span class=S>"xor"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"XOR"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_xor_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector XOR operation</span>

  <span class=C>-- ---------------------------------------------------------------------------</span>
  <span class=C>-- Note : Function L.7 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>-- out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>-- ---------------------------------------------------------------------------</span>
  <span class=C>-- Id: L.7</span>
  <span class=K>function</span> <span class=S>"xnor"</span> (L, R: UNSIGNED) <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"XNOR"</span>[UNSIGNED, UNSIGNED <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_xnor_1164"</span>;
  <span class=C>-- Result subtype: UNSIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector XNOR operation</span>

  <span class=C>-- Id: L.8</span>
  <span class=K>function</span> <span class=S>"not"</span> (L: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NOT"</span>[SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_not_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Termwise inversion</span>

  <span class=C>-- Id: L.9</span>
  <span class=K>function</span> <span class=S>"and"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"AND"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_and_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector AND operation</span>

  <span class=C>-- Id: L.10</span>
  <span class=K>function</span> <span class=S>"or"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"OR"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_or_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector OR operation</span>

  <span class=C>-- Id: L.11</span>
  <span class=K>function</span> <span class=S>"nand"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NAND"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_nand_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector NAND operation</span>

  <span class=C>-- Id: L.12</span>
  <span class=K>function</span> <span class=S>"nor"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"NOR"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_nor_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector NOR operation</span>

  <span class=C>-- Id: L.13</span>
  <span class=K>function</span> <span class=S>"xor"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"XOR"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_xor_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector XOR operation</span>

  <span class=C>-- ---------------------------------------------------------------------------</span>
  <span class=C>-- Note : Function L.14 is not compatible with VHDL 1076-1987. Comment</span>
  <span class=C>-- out the function (declaration and body) for VHDL 1076-1987 compatibility.</span>
  <span class=C>-- ---------------------------------------------------------------------------</span>
  <span class=C>-- Id: L.14</span>
  <span class=K>function</span> <span class=S>"xnor"</span> (L, R: SIGNED) <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        <span class=S>"XNOR"</span>[SIGNED, SIGNED <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"array_xnor_1164"</span>;
  <span class=C>-- Result subtype: SIGNED(L'LENGTH-1 downto 0)</span>
  <span class=C>-- Result: Vector XNOR operation</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Match Functions</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: M.1</span>
  <span class=K>function</span> STD_MATCH (L, R: <span class=T>STD_ULOGIC</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        STD_MATCH[<span class=T>STD_ULOGIC</span>, <span class=T>STD_ULOGIC</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span>
		<span class=K>is</span> <span class=S>"numstd_match_xx"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: terms compared per STD_LOGIC_1164 intent</span>

  <span class=C>-- Id: M.2</span>
  <span class=K>function</span> STD_MATCH (L, R: UNSIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        STD_MATCH[UNSIGNED, UNSIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span>
		<span class=K>is</span> <span class=S>"numstd_array_match_1164"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: terms compared per STD_LOGIC_1164 intent</span>

  <span class=C>-- Id: M.3</span>
  <span class=K>function</span> STD_MATCH (L, R: SIGNED) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        STD_MATCH[SIGNED, SIGNED <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span>
		<span class=K>is</span> <span class=S>"numstd_array_match_1164"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: terms compared per STD_LOGIC_1164 intent</span>

  <span class=C>-- Id: M.4</span>
  <span class=K>function</span> STD_MATCH (L, R: <span class=T>STD_LOGIC_VECTOR</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        STD_MATCH[<span class=T>STD_LOGIC_VECTOR</span>, <span class=T>STD_LOGIC_VECTOR</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span>
		<span class=K>is</span> <span class=S>"numstd_array_match_1164"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: terms compared per STD_LOGIC_1164 intent</span>

  <span class=C>-- Id: M.5</span>
  <span class=K>function</span> STD_MATCH (L, R: <span class=T>STD_ULOGIC_VECTOR</span>) <span class=K>return</span> <span class=T>BOOLEAN</span>;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        STD_MATCH[<span class=T>STD_ULOGIC_VECTOR</span>, <span class=T>STD_ULOGIC_VECTOR</span> <span class=K>return</span> <span class=T>BOOLEAN</span>]: <span class=K>function</span>
		<span class=K>is</span> <span class=S>"numstd_array_match_1164"</span>;
  <span class=C>-- Result subtype: BOOLEAN</span>
  <span class=C>-- Result: terms compared per STD_LOGIC_1164 intent</span>

  <span class=C>--============================================================================</span>
  <span class=C>-- Translation Functions</span>
  <span class=C>--============================================================================</span>

  <span class=C>-- Id: T.1</span>
  <span class=K>function</span> TO_01 (S: UNSIGNED; XMAP: <span class=T>STD_LOGIC</span> := '0') <span class=K>return</span> UNSIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_01[UNSIGNED, <span class=T>STD_LOGIC</span> <span class=K>return</span> UNSIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_to01_uu"</span>;
  <span class=C>-- Result subtype: UNSIGNED(S'RANGE)</span>
  <span class=C>-- Result: Termwise, 'H' is translated to '1', and 'L' is translated</span>
  <span class=C>--         to '0'. If a value other than '0'|'1'|'H'|'L' is found,</span>
  <span class=C>--         the array is set to (others =&gt; XMAP), and a warning is</span>
  <span class=C>--         issued.</span>

  <span class=C>-- Id: T.2</span>
  <span class=K>function</span> TO_01 (S: SIGNED; XMAP: <span class=T>STD_LOGIC</span> := '0') <span class=K>return</span> SIGNED;
    <span class=K>attribute</span> builtin_subprogram <span class=K>of</span>
        TO_01[SIGNED, <span class=T>STD_LOGIC</span> <span class=K>return</span> SIGNED]: <span class=K>function</span> <span class=K>is</span> <span class=S>"numstd_to01_ss"</span>;
  <span class=C>-- Result subtype: SIGNED(S'RANGE)</span>
  <span class=C>-- Result: Termwise, 'H' is translated to '1', and 'L' is translated</span>
  <span class=C>--         to '0'. If a value other than '0'|'1'|'H'|'L' is found,</span>
  <span class=C>--         the array is set to (others =&gt; XMAP), and a warning is</span>
  <span class=C>--         issued.</span>

<span class=K>end</span> NUMERIC_STD;
</pre>
<SCRIPT SRC="../scripts/is.js"></SCRIPT><SCRIPT SRC="../scripts/imageFrame.js"></SCRIPT>
</body>
