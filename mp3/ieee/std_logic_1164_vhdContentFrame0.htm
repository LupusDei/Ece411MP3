<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title>std_logic_1164.vhd</title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 00:57:47 on 09/15/11 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>--</span>
<span class=C>-- 9 valued logic system standardized by IEEE</span>
<span class=C>-- This file is for simulation purposes only</span>
<span class=C>--             :</span>
<span class=C>-- --------------------------------------------------------------------</span>
<span class=C>--   modification history :</span>
<span class=C>-- --------------------------------------------------------------------</span>
<span class=C>--  version | mod. date:| </span>
<span class=C>--   v4.200 | 01&#47;02&#47;92  | </span>
<span class=C>--   </span>
<span class=C>-- --------------------------------------------------------------------</span>

<span class=K>PACKAGE</span> std_logic_1164 <span class=K>IS</span>

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- logic state system  (unresolved)</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>TYPE</span> <span class=T>std_ulogic</span> <span class=K>IS</span> ( 'U',  <span class=C>-- Uninitialized</span>
                         'X',  <span class=C>-- Forcing  Unknown</span>
                         '0',  <span class=C>-- Forcing  0</span>
                         '1',  <span class=C>-- Forcing  1</span>
                         'Z',  <span class=C>-- High Impedance   </span>
                         'W',  <span class=C>-- Weak     Unknown</span>
                         'L',  <span class=C>-- Weak     0       </span>
                         'H',  <span class=C>-- Weak     1       </span>
                         '-'   <span class=C>-- Don't care</span>
                       );
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- unconstrained array of std_ulogic for use with the resolution function</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>TYPE</span> <span class=T>std_ulogic_vector</span> <span class=K>IS</span> <span class=K>ARRAY</span> ( <span class=T>NATURAL</span> <span class=K>RANGE</span> <> ) <span class=K>OF</span> <span class=T>std_ulogic</span>;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- resolution function</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>FUNCTION</span> resolved ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic</span>;


    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- *** industry standard logic type ***</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>SUBTYPE</span> <span class=T>std_logic</span> <span class=K>IS</span> resolved <span class=T>std_ulogic</span>;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- unconstrained array of std_logic for use in declaring signal arrays</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>TYPE</span> <span class=T>std_logic_vector</span> <span class=K>IS</span> <span class=K>ARRAY</span> ( <span class=T>NATURAL</span> <span class=K>RANGE</span> <>) <span class=K>OF</span> <span class=T>std_logic</span>;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- common subtypes</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>SUBTYPE</span> X01     <span class=K>IS</span> resolved <span class=T>std_ulogic</span> <span class=K>RANGE</span> 'X' <span class=K>TO</span> '1'; <span class=C>-- ('X','0','1') </span>
    <span class=K>SUBTYPE</span> X01Z    <span class=K>IS</span> resolved <span class=T>std_ulogic</span> <span class=K>RANGE</span> 'X' <span class=K>TO</span> 'Z'; <span class=C>-- ('X','0','1','Z') </span>
    <span class=K>SUBTYPE</span> UX01    <span class=K>IS</span> resolved <span class=T>std_ulogic</span> <span class=K>RANGE</span> 'U' <span class=K>TO</span> '1'; <span class=C>-- ('U','X','0','1') </span>
    <span class=K>SUBTYPE</span> UX01Z   <span class=K>IS</span> resolved <span class=T>std_ulogic</span> <span class=K>RANGE</span> 'U' <span class=K>TO</span> 'Z'; <span class=C>-- ('U','X','0','1','Z') </span>

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- overloaded logical operators</span>
    <span class=C>-------------------------------------------------------------------    </span>

    <span class=K>FUNCTION</span> <span class=S>"and"</span>  ( l : <span class=T>std_ulogic</span>; r : <span class=T>std_ulogic</span> ) <span class=K>RETURN</span> UX01;
    <span class=K>FUNCTION</span> <span class=S>"nand"</span> ( l : <span class=T>std_ulogic</span>; r : <span class=T>std_ulogic</span> ) <span class=K>RETURN</span> UX01;
    <span class=K>FUNCTION</span> <span class=S>"or"</span>   ( l : <span class=T>std_ulogic</span>; r : <span class=T>std_ulogic</span> ) <span class=K>RETURN</span> UX01;
    <span class=K>FUNCTION</span> <span class=S>"nor"</span>  ( l : <span class=T>std_ulogic</span>; r : <span class=T>std_ulogic</span> ) <span class=K>RETURN</span> UX01;
    <span class=K>FUNCTION</span> <span class=S>"xor"</span>  ( l : <span class=T>std_ulogic</span>; r : <span class=T>std_ulogic</span> ) <span class=K>RETURN</span> UX01;
    <span class=C>--function &quot;xnor&quot; ( l : std_ulogic; r : std_ulogic ) return ux01;</span>
    <span class=K>FUNCTION</span> <span class=S>"not"</span>  ( l : <span class=T>std_ulogic</span>                 ) <span class=K>RETURN</span> UX01;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- vectorized overloaded logical operators</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>FUNCTION</span> <span class=S>"and"</span>  ( l, r : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"and"</span>  ( l, r : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=K>FUNCTION</span> <span class=S>"nand"</span> ( l, r : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"nand"</span> ( l, r : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=K>FUNCTION</span> <span class=S>"or"</span>   ( l, r : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"or"</span>   ( l, r : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=K>FUNCTION</span> <span class=S>"nor"</span>  ( l, r : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"nor"</span>  ( l, r : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=K>FUNCTION</span> <span class=S>"xor"</span>  ( l, r : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"xor"</span>  ( l, r : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;
    <span class=C>--  -----------------------------------------------------------------------</span>
    <span class=C>--  Note : The declaration and implementation of the &quot;xnor&quot; function is</span>
    <span class=C>--  specifically commented until at which time the VHDL language has been</span>
    <span class=C>--  officially adopted as containing such a function. At such a point, </span>
    <span class=C>--  the following comments may be removed along with this notice without</span>
    <span class=C>--  further &quot;official&quot; ballotting of this std_logic_1164 package. It is</span>
    <span class=C>--  the intent of this effort to provide such a function once it becomes</span>
    <span class=C>--  available in the VHDL standard.</span>
    <span class=C>--  -----------------------------------------------------------------------</span>
    <span class=C>-- function &quot;xnor&quot; ( l, r : std_logic_vector  ) return std_logic_vector;</span>
    <span class=C>-- function &quot;xnor&quot; ( l, r : std_ulogic_vector ) return std_ulogic_vector;</span>

    <span class=K>FUNCTION</span> <span class=S>"not"</span>  ( l : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> <span class=S>"not"</span>  ( l : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=C>-------------------------------------------------------------------</span>
    <span class=C>-- conversion functions</span>
    <span class=C>-------------------------------------------------------------------</span>
    <span class=K>FUNCTION</span> To_bit       ( s : <span class=T>std_ulogic</span>;        xmap : <span class=T>BIT</span> := '0') <span class=K>RETURN</span> <span class=T>BIT</span>;
    <span class=K>FUNCTION</span> To_bitvector ( s : <span class=T>std_logic_vector</span> ; xmap : <span class=T>BIT</span> := '0') <span class=K>RETURN</span> <span class=T>BIT_VECTOR</span>;
    <span class=K>FUNCTION</span> To_bitvector ( s : <span class=T>std_ulogic_vector</span>; xmap : <span class=T>BIT</span> := '0') <span class=K>RETURN</span> <span class=T>BIT_VECTOR</span>;

    <span class=K>FUNCTION</span> To_StdULogic       ( b : <span class=T>BIT</span>               ) <span class=K>RETURN</span> <span class=T>std_ulogic</span>;
    <span class=K>FUNCTION</span> To_StdLogicVector  ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_StdLogicVector  ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span> <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_StdULogicVector ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_StdULogicVector ( s : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span> <span class=T>std_ulogic_vector</span>;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- strength strippers and type convertors</span>
    <span class=C>-------------------------------------------------------------------    </span>

    <span class=K>FUNCTION</span> To_X01  ( s : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_X01  ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_X01  ( s : <span class=T>std_ulogic</span>        ) <span class=K>RETURN</span>  X01;
    <span class=K>FUNCTION</span> To_X01  ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_X01  ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_X01  ( b : <span class=T>BIT</span>               ) <span class=K>RETURN</span>  X01;

    <span class=K>FUNCTION</span> To_X01Z ( s : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_X01Z ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_X01Z ( s : <span class=T>std_ulogic</span>        ) <span class=K>RETURN</span>  X01Z;
    <span class=K>FUNCTION</span> To_X01Z ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_X01Z ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_X01Z ( b : <span class=T>BIT</span>               ) <span class=K>RETURN</span>  X01Z;

    <span class=K>FUNCTION</span> To_UX01  ( s : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_UX01  ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_UX01  ( s : <span class=T>std_ulogic</span>        ) <span class=K>RETURN</span>  UX01;
    <span class=K>FUNCTION</span> To_UX01  ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_logic_vector</span>;
    <span class=K>FUNCTION</span> To_UX01  ( b : <span class=T>BIT_VECTOR</span>        ) <span class=K>RETURN</span>  <span class=T>std_ulogic_vector</span>;
    <span class=K>FUNCTION</span> To_UX01  ( b : <span class=T>BIT</span>               ) <span class=K>RETURN</span>  UX01;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- edge detection</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>FUNCTION</span> rising_edge  (<span class=K>SIGNAL</span> s : <span class=T>std_ulogic</span>) <span class=K>RETURN</span> <span class=T>BOOLEAN</span>;
    <span class=K>FUNCTION</span> falling_edge (<span class=K>SIGNAL</span> s : <span class=T>std_ulogic</span>) <span class=K>RETURN</span> <span class=T>BOOLEAN</span>;

    <span class=C>-------------------------------------------------------------------    </span>
    <span class=C>-- object contains an unknown</span>
    <span class=C>-------------------------------------------------------------------    </span>
    <span class=K>FUNCTION</span> Is_X ( s : <span class=T>std_ulogic_vector</span> ) <span class=K>RETURN</span>  <span class=T>BOOLEAN</span>;
    <span class=K>FUNCTION</span> Is_X ( s : <span class=T>std_logic_vector</span>  ) <span class=K>RETURN</span>  <span class=T>BOOLEAN</span>;
    <span class=K>FUNCTION</span> Is_X ( s : <span class=T>std_ulogic</span>        ) <span class=K>RETURN</span>  <span class=T>BOOLEAN</span>;

<span class=K>END</span> std_logic_1164;
</pre>
<SCRIPT SRC="../scripts/is.js"></SCRIPT><SCRIPT SRC="../scripts/imageFrame.js"></SCRIPT>
</body>
